"""
This is a generated module
all modified changes will be lost in the next code generation
"""

import sys

assert sys.version >= '2' and sys.version_info.minor >= 7, "Python 2.7 or greater is supported"

import os
import unittest

from testc.regression.helper import RegressionHelper
from testc.regression.helper import RegressionBase
from testc.regression.helper import regressionLogger

__test__ = True
__all__ = ["Test_EVLA3BitTutorialG192Eg"]

class Test_EVLA3BitTutorialG192Eg(RegressionBase):
	"""Testing class for EVLA_3-bit_Tutorial_G192 casa guide

	This is an autogenerated class for EVLA_3-bit_Tutorial_G192 guide testing purposes,
	all the modified code will be re-written in the next code generation.

	The class will test the following phrases:

	test_00 "splitting fields for analysis"
	test_01 "listobs on the initial data set"
	test_02 "flag table plot"
	test_03 "bandpass calibrator analysis flagging"
	test_04 "RFI phase calibrator flagging"
	test_05 "splitting good and bad data"
	test_06 "split and flagged listobs"
	test_07 "model for the flux calibrator"
	test_08 "determining antenna position corrections"
	test_09 "generating gaincurve calibration"
	test_10 "generate atmospheric opacity calibration"
	test_11 "generate requantizer gains corrections"
	test_12 "phase only calibration"
	test_13 "residual delays"
	test_14 "antenna bandpasses"
	test_15 "flux and bandpass calibrators gain"
	test_16 "bandpass calibrator gain amplitudes scaling"
	test_17 "spectral information"
	test_18 "phase only recalibration"
	test_19 "residual delays recalibration"
	test_20 "antenna bandpasses recalibration"
	test_21 "compute gain phases using 3C147"
	test_22 "compute gain phases using J0603+174"
	test_23 "compute gain phases using 3C84"
	test_24 "applying phase calibration"
	test_25 "3C147 scan solving amplitudes"
	test_26 "J0603+174  scan solving amplitudes"
	test_27 "3C84 scan solving amplitudes"
	test_28 "using fluxscale to transfer the amplitude solutions"
	test_29 "3C147 accumulated calibration"
	test_30 "gain accumulated calibration"
	test_31 "G192 accumulated calibration"
	test_32 "3C84 accumulated calibration"
	test_33 "flagging isolated RFI"
	test_34 "baseline flagging"
	test_35 "3C147 density model"
	test_36 "3C84 spectral information column"
	test_37 "initial phase calibration"
	test_38 "delay calibration"
	test_39 "bandpass calibration"
	test_40 "phase gain calibration field 0"
	test_41 "phase gain calibration field 1"
	test_42 "phase gain calibration field 3"
	test_43 "phase gain calibration infinite solution interval"
	test_44 "amplitude calibration solutions field 0"
	test_45 "amplitude calibration solutions field 1"
	test_46 "amplitude calibration solutions field 3"
	test_47 "flux calibration solutions"
	test_48 "apply calibration tables field 0"
	test_49 "apply calibration tables field 1"
	test_50 "apply calibration tables field 2"
	test_51 "apply calibration tables field 3"
	test_52 "splitting calibrated data 3C147"
	test_53 "splitting calibrated data J0603+174"
	test_54 "splitting calibrated data G192"
	test_55 "splitting calibrated data 3C84"
	test_56 "single spectral window cleaning"
	test_57 "lower frequency baseband cleaning"
	test_58 "upper frequency baseband cleaning"
	test_59 "basebands mfs taylor cleaning"
	test_60 "spectral index image filtering"
	test_61 "spectral index probable errors filtering"
	test_62 "intensity weighted mean spectral analysis"
	"""

	@classmethod
	def setUpClass(cls):
		pass

	def setUp(self):
		pass

	def tearDown(self):
		pass

	@classmethod
	def tearDownClass(cls):
		pass

	#@unittest.skip("still a stub, to be implemented")
	def test_00_splitting_fields_for_analysis(self):
		"""test 00 EVLA_3-bit_Tutorial_G192 "splitting fields for analysis"
		"""
		self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_00"})
		self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_00"})

	#@unittest.skip("still a stub, to be implemented")
	def test_01_listobs_on_the_initial_data_set(self):
		"""test 01 EVLA_3-bit_Tutorial_G192 "listobs on the initial data set"
		"""
		self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_01"})
		self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_01"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_02_flag_table_plot(self):
	# 	"""test 02 EVLA_3-bit_Tutorial_G192 "flag table plot"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_02"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_02"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_03_bandpass_calibrator_analysis_flagging(self):
	# 	"""test 03 EVLA_3-bit_Tutorial_G192 "bandpass calibrator analysis flagging"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_03"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_03"})

	#@unittest.skip("still a stub, to be implemented")
	# def test_04_rfi_phase_calibrator_flagging(self):
	# 	"""test 04 EVLA_3-bit_Tutorial_G192 "RFI phase calibrator flagging"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_04"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_04"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_05_splitting_good_and_bad_data(self):
	# 	"""test 05 EVLA_3-bit_Tutorial_G192 "splitting good and bad data"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_05"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_05"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_06_split_and_flagged_listobs(self):
	# 	"""test 06 EVLA_3-bit_Tutorial_G192 "split and flagged listobs"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_06"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_06"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_07_model_for_the_flux_calibrator(self):
	# 	"""test 07 EVLA_3-bit_Tutorial_G192 "model for the flux calibrator"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_07"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_07"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_08_determining_antenna_position_corrections(self):
	# 	"""test 08 EVLA_3-bit_Tutorial_G192 "determining antenna position corrections"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_08"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_08"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_09_generating_gaincurve_calibration(self):
	# 	"""test 09 EVLA_3-bit_Tutorial_G192 "generating gaincurve calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_09"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_09"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_10_generate_atmospheric_opacity_calibration(self):
	# 	"""test 10 EVLA_3-bit_Tutorial_G192 "generate atmospheric opacity calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_10"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_10"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_11_generate_requantizer_gains_corrections(self):
	# 	"""test 11 EVLA_3-bit_Tutorial_G192 "generate requantizer gains corrections"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_11"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_11"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_12_phase_only_calibration(self):
	# 	"""test 12 EVLA_3-bit_Tutorial_G192 "phase only calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_12"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_12"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_13_residual_delays(self):
	# 	"""test 13 EVLA_3-bit_Tutorial_G192 "residual delays"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_13"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_13"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_14_antenna_bandpasses(self):
	# 	"""test 14 EVLA_3-bit_Tutorial_G192 "antenna bandpasses"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_14"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_14"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_15_flux_and_bandpass_calibrators_gain(self):
	# 	"""test 15 EVLA_3-bit_Tutorial_G192 "flux and bandpass calibrators gain"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_15"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_15"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_16_bandpass_calibrator_gain_amplitudes_scaling(self):
	# 	"""test 16 EVLA_3-bit_Tutorial_G192 "bandpass calibrator gain amplitudes scaling"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_16"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_16"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_17_spectral_information(self):
	# 	"""test 17 EVLA_3-bit_Tutorial_G192 "spectral information"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_17"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_17"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_18_phase_only_recalibration(self):
	# 	"""test 18 EVLA_3-bit_Tutorial_G192 "phase only recalibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_18"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_18"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_19_residual_delays_recalibration(self):
	# 	"""test 19 EVLA_3-bit_Tutorial_G192 "residual delays recalibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_19"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_19"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_20_antenna_bandpasses_recalibration(self):
	# 	"""test 20 EVLA_3-bit_Tutorial_G192 "antenna bandpasses recalibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_20"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_20"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_21_compute_gain_phases_using_3c147(self):
	# 	"""test 21 EVLA_3-bit_Tutorial_G192 "compute gain phases using 3C147"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_21"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_21"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_22_compute_gain_phases_using_j0603_174(self):
	# 	"""test 22 EVLA_3-bit_Tutorial_G192 "compute gain phases using J0603+174"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_22"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_22"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_23_compute_gain_phases_using_3c84(self):
	# 	"""test 23 EVLA_3-bit_Tutorial_G192 "compute gain phases using 3C84"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_23"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_23"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_24_applying_phase_calibration(self):
	# 	"""test 24 EVLA_3-bit_Tutorial_G192 "applying phase calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_24"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_24"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_25_3c147_scan_solving_amplitudes(self):
	# 	"""test 25 EVLA_3-bit_Tutorial_G192 "3C147 scan solving amplitudes"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_25"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_25"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_26_j0603_174__scan_solving_amplitudes(self):
	# 	"""test 26 EVLA_3-bit_Tutorial_G192 "J0603+174  scan solving amplitudes"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_26"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_26"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_27_3c84_scan_solving_amplitudes(self):
	# 	"""test 27 EVLA_3-bit_Tutorial_G192 "3C84 scan solving amplitudes"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_27"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_27"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_28_using_fluxscale_to_transfer_the_amplitude_solutions(self):
	# 	"""test 28 EVLA_3-bit_Tutorial_G192 "using fluxscale to transfer the amplitude solutions"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_28"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_28"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_29_3c147_accumulated_calibration(self):
	# 	"""test 29 EVLA_3-bit_Tutorial_G192 "3C147 accumulated calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_29"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_29"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_30_gain_accumulated_calibration(self):
	# 	"""test 30 EVLA_3-bit_Tutorial_G192 "gain accumulated calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_30"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_30"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_31_g192_accumulated_calibration(self):
	# 	"""test 31 EVLA_3-bit_Tutorial_G192 "G192 accumulated calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_31"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_31"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_32_3c84_accumulated_calibration(self):
	# 	"""test 32 EVLA_3-bit_Tutorial_G192 "3C84 accumulated calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_32"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_32"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_33_flagging_isolated_rfi(self):
	# 	"""test 33 EVLA_3-bit_Tutorial_G192 "flagging isolated RFI"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_33"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_33"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_34_baseline_flagging(self):
	# 	"""test 34 EVLA_3-bit_Tutorial_G192 "baseline flagging"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_34"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_34"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_35_3c147_density_model(self):
	# 	"""test 35 EVLA_3-bit_Tutorial_G192 "3C147 density model"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_35"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_35"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_36_3c84_spectral_information_column(self):
	# 	"""test 36 EVLA_3-bit_Tutorial_G192 "3C84 spectral information column"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_36"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_36"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_37_initial_phase_calibration(self):
	# 	"""test 37 EVLA_3-bit_Tutorial_G192 "initial phase calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_37"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_37"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_38_delay_calibration(self):
	# 	"""test 38 EVLA_3-bit_Tutorial_G192 "delay calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_38"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_38"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_39_bandpass_calibration(self):
	# 	"""test 39 EVLA_3-bit_Tutorial_G192 "bandpass calibration"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_39"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_39"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_40_phase_gain_calibration_field_0(self):
	# 	"""test 40 EVLA_3-bit_Tutorial_G192 "phase gain calibration field 0"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_40"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_40"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_41_phase_gain_calibration_field_1(self):
	# 	"""test 41 EVLA_3-bit_Tutorial_G192 "phase gain calibration field 1"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_41"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_41"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_42_phase_gain_calibration_field_3(self):
	# 	"""test 42 EVLA_3-bit_Tutorial_G192 "phase gain calibration field 3"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_42"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_42"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_43_phase_gain_calibration_infinite_solution_interval(self):
	# 	"""test 43 EVLA_3-bit_Tutorial_G192 "phase gain calibration infinite solution interval"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_43"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_43"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_44_amplitude_calibration_solutions_field_0(self):
	# 	"""test 44 EVLA_3-bit_Tutorial_G192 "amplitude calibration solutions field 0"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_44"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_44"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_45_amplitude_calibration_solutions_field_1(self):
	# 	"""test 45 EVLA_3-bit_Tutorial_G192 "amplitude calibration solutions field 1"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_45"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_45"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_46_amplitude_calibration_solutions_field_3(self):
	# 	"""test 46 EVLA_3-bit_Tutorial_G192 "amplitude calibration solutions field 3"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_46"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_46"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_47_flux_calibration_solutions(self):
	# 	"""test 47 EVLA_3-bit_Tutorial_G192 "flux calibration solutions"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_47"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_47"})

	# ##@unittest.skip("still a stub, to be implemented")
	# def test_48_apply_calibration_tables_field_0(self):
	# 	"""test 48 EVLA_3-bit_Tutorial_G192 "apply calibration tables field 0"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_48"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_48"})

	# ##@unittest.skip("still a stub, to be implemented")
	# def test_49_apply_calibration_tables_field_1(self):
	# 	"""test 49 EVLA_3-bit_Tutorial_G192 "apply calibration tables field 1"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_49"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_49"})

	# ##@unittest.skip("still a stub, to be implemented")
	# def test_50_apply_calibration_tables_field_2(self):
	# 	"""test 50 EVLA_3-bit_Tutorial_G192 "apply calibration tables field 2"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_50"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_50"})

	# ##@unittest.skip("still a stub, to be implemented")
	# def test_51_apply_calibration_tables_field_3(self):
	# 	"""test 51 EVLA_3-bit_Tutorial_G192 "apply calibration tables field 3"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_51"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_51"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_52_splitting_calibrated_data_3c147(self):
	# 	"""test 52 EVLA_3-bit_Tutorial_G192 "splitting calibrated data 3C147"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_52"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_52"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_53_splitting_calibrated_data_j0603_174(self):
	# 	"""test 53 EVLA_3-bit_Tutorial_G192 "splitting calibrated data J0603+174"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_53"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_53"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_54_splitting_calibrated_data_g192(self):
	# 	"""test 54 EVLA_3-bit_Tutorial_G192 "splitting calibrated data G192"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_54"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_54"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_55_splitting_calibrated_data_3c84(self):
	# 	"""test 55 EVLA_3-bit_Tutorial_G192 "splitting calibrated data 3C84"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_55"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_55"})

	# @unittest.skip("still a stub, to be implemented")
	# def test_56_single_spectral_window_cleaning(self):
	# 	"""test 56 EVLA_3-bit_Tutorial_G192 "single spectral window cleaning"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_56"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_56"})

	# @unittest.skip("still a stub, to be implemented")
	# def test_57_lower_frequency_baseband_cleaning(self):
	# 	"""test 57 EVLA_3-bit_Tutorial_G192 "lower frequency baseband cleaning"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_57"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_57"})

	# @unittest.skip("still a stub, to be implemented")
	# def test_58_upper_frequency_baseband_cleaning(self):
	# 	"""test 58 EVLA_3-bit_Tutorial_G192 "upper frequency baseband cleaning"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_58"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_58"})

	# @unittest.skip("still a stub, to be implemented")
	# def test_59_basebands_mfs_taylor_cleaning(self):
	# 	"""test 59 EVLA_3-bit_Tutorial_G192 "basebands mfs taylor cleaning"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_59"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_59"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_60_spectral_index_image_filtering(self):
	# 	"""test 60 EVLA_3-bit_Tutorial_G192 "spectral index image filtering"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_60"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_60"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_61_spectral_index_probable_errors_filtering(self):
	# 	"""test 61 EVLA_3-bit_Tutorial_G192 "spectral index probable errors filtering"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_61"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_61"})

	# #@unittest.skip("still a stub, to be implemented")
	# def test_62_intensity_weighted_mean_spectral_analysis(self):
	# 	"""test 62 EVLA_3-bit_Tutorial_G192 "intensity weighted mean spectral analysis"
	# 	"""
	# 	self.execute("guides_helper_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "helper_62"})
	# 	self.execute("guides_post_EVLA3BitTutorialG192Eg", custom_globals = {"exec_method" : "post_62"})
