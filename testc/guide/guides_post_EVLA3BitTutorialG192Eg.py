"""
This is NOT a generated module
all modified changes will be kept.

The module provide to execute a method of the helper class by using the value
of "exec_method" key inserted at runtime in the globals map
"""

import sys

assert sys.version >= '2' and sys.version_info.minor >= 7, "Python 2.7 or greater is supported"
assert globals().has_key("IPython"), "IPython environment is needed for this module (%s)" % __file__
assert globals().has_key("casa"), "CASA environment is needed for this module (%s)" % __file__

import os
import time
from contextlib import contextmanager

from testc.regression.helper import RegressionHelper
from testc.regression.helper import regressionLogger

from numpy import count_nonzero

__test__ = False
__all__ = ["Post_Test_EVLA3BitTutorialG192Eg"]

@contextmanager
def msfile(file):
	table_instance = tbtool()
	table_instance.open(file)
	yield table_instance
	table_instance.close()
	del table_instance

class Post_Test_EVLA3BitTutorialG192Eg():
	"""Post class for EVLA_3-bit_Tutorial_G192 casa guide

	This is NOT an autogenerated class for EVLA_3-bit_Tutorial_G192 guide testing purposes,
	all the modified code will be kept.
	"""

	def exec_method(self, method_name):
		"""Execute a method from this object instance
		"""
		regressionLogger.debug("exec_method(self, %s):... sleeping 2 seconds" % method_name)
		# add a sleep of 2 seconds, for a visible separation for the ploting profile, this
		# should be improved
		time.sleep(2)
		getattr(self, method_name)()

	def post_00(self):
		"""post method for "splitting fields for analysis"
		"""
		RegressionHelper.assert_file("%s/G192_6s.ms" % os.getcwd())

	def post_01(self):
		"""post method for "listobs on the initial data set"
		"""
		listobs_file = "%s/G192_listobs.txt" % os.getcwd()
		RegressionHelper.assert_file(listobs_file)

		remove = []
		remove.append(listobs_file)
		remove.append("%s/listobs.last" % os.getcwd())
		#RegressionHelper.data_remove(remove)

	def post_02(self):
		"""post method for "flag table plot"
		"""
		RegressionHelper.assert_file("%s/PlotG192_flagcmd_4.1.png" % os.getcwd())

	def post_03(self):
		"""post method for "bandpass calibrator analysis flagging"
		"""
		mset = "%s/G192_6s.ms" % os.getcwd()
		nflag_rows = 0
		
		with msfile(mset) as table:
			nflag_rows = count_nonzero(table.getcol("FLAG_ROW"))
		
		assert nflag_rows > 0, "No FLAG_ROWS in %s" % mset
		assert nflag_rows == 2909568, "The number of FLAG_ROWS (%s) doesn't match to the expected one" % nflag_rows

	def post_04(self):
		"""post method for "RFI phase calibrator flagging"
		"""
		mset = "%s/G192_6s.ms" % os.getcwd()
		nflag_rows = 0
		
		with msfile(mset) as table:
			nflag_rows = count_nonzero(table.getcol("FLAG_ROW"))
		
		assert nflag_rows > 0, "No FLAG_ROWS in %s" % mset
		assert nflag_rows == 2909568, "The number of FLAG_ROWS (%s) doesn't match to the expected one" % nflag_rows

	def post_05(self):
		"""post method for "splitting good and bad data"
		"""
		# dont delete G192_flagged_6s.ms all the tests relies on the
		# the dataset with the the flagged data
		outputvis = "G192_flagged_6s.ms"
		RegressionHelper.assert_file("%s/%s" % (os.getcwd(), outputvis))

	def post_06(self):
		"""post method for "split and flagged listobs"
		"""
		listobs_file = "%s/G192_flagged_listobs.txt" % os.getcwd()
		RegressionHelper.assert_file(listobs_file)

	def post_07(self):
		"""post method for "model for the flux calibrator"
		"""
		# check that the MODEL column in the MS exists for field 0
		assert True, "dummy assert"

	def post_08(self):
		"""post method for "determining antenna position corrections"
		"""
		produced_files = []
		produced_files.append("calG192.antpos")
		produced_files.append("calG192.antpos/table.dat")
		produced_files.append("calG192.antpos/table.lock")
		produced_files.append("calG192.antpos/ANTENNA")
		produced_files.append("calG192.antpos/ANTENNA/table.dat")
		produced_files.append("calG192.antpos/ANTENNA/table.lock")
		produced_files.append("calG192.antpos/ANTENNA/table.info")
		produced_files.append("calG192.antpos/ANTENNA/table.f0")
		produced_files.append("calG192.antpos/SPECTRAL_WINDOW")
		produced_files.append("calG192.antpos/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.antpos/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.antpos/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.antpos/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.antpos/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.antpos/HISTORY")
		produced_files.append("calG192.antpos/HISTORY/table.dat")
		produced_files.append("calG192.antpos/HISTORY/table.lock")
		produced_files.append("calG192.antpos/HISTORY/table.info")
		produced_files.append("calG192.antpos/HISTORY/table.f0")
		produced_files.append("calG192.antpos/FIELD")
		produced_files.append("calG192.antpos/FIELD/table.dat")
		produced_files.append("calG192.antpos/FIELD/table.lock")
		produced_files.append("calG192.antpos/FIELD/table.f0i")
		produced_files.append("calG192.antpos/FIELD/table.info")
		produced_files.append("calG192.antpos/FIELD/table.f0")
		produced_files.append("calG192.antpos/table.f0i")
		produced_files.append("calG192.antpos/table.info")
		produced_files.append("calG192.antpos/OBSERVATION")
		produced_files.append("calG192.antpos/OBSERVATION/table.dat")
		produced_files.append("calG192.antpos/OBSERVATION/table.lock")
		produced_files.append("calG192.antpos/OBSERVATION/table.info")
		produced_files.append("calG192.antpos/OBSERVATION/table.f0")
		produced_files.append("calG192.antpos/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_09(self):
		"""post method for "generating gaincurve calibration"
		"""
		produced_files = []
		produced_files.append("calG192.gaincurve")
		produced_files.append("calG192.gaincurve/table.dat")
		produced_files.append("calG192.gaincurve/table.lock")
		produced_files.append("calG192.gaincurve/ANTENNA")
		produced_files.append("calG192.gaincurve/ANTENNA/table.dat")
		produced_files.append("calG192.gaincurve/ANTENNA/table.lock")
		produced_files.append("calG192.gaincurve/ANTENNA/table.info")
		produced_files.append("calG192.gaincurve/ANTENNA/table.f0")
		produced_files.append("calG192.gaincurve/SPECTRAL_WINDOW")
		produced_files.append("calG192.gaincurve/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.gaincurve/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.gaincurve/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.gaincurve/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.gaincurve/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.gaincurve/HISTORY")
		produced_files.append("calG192.gaincurve/HISTORY/table.dat")
		produced_files.append("calG192.gaincurve/HISTORY/table.lock")
		produced_files.append("calG192.gaincurve/HISTORY/table.info")
		produced_files.append("calG192.gaincurve/HISTORY/table.f0")
		produced_files.append("calG192.gaincurve/FIELD")
		produced_files.append("calG192.gaincurve/FIELD/table.dat")
		produced_files.append("calG192.gaincurve/FIELD/table.lock")
		produced_files.append("calG192.gaincurve/FIELD/table.f0i")
		produced_files.append("calG192.gaincurve/FIELD/table.info")
		produced_files.append("calG192.gaincurve/FIELD/table.f0")
		produced_files.append("calG192.gaincurve/table.f0i")
		produced_files.append("calG192.gaincurve/table.info")
		produced_files.append("calG192.gaincurve/OBSERVATION")
		produced_files.append("calG192.gaincurve/OBSERVATION/table.dat")
		produced_files.append("calG192.gaincurve/OBSERVATION/table.lock")
		produced_files.append("calG192.gaincurve/OBSERVATION/table.info")
		produced_files.append("calG192.gaincurve/OBSERVATION/table.f0")
		produced_files.append("calG192.gaincurve/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_10(self):
		"""post method for "generate atmospheric opacity calibration"
		"""
		produced_files = []
		produced_files.append("calG192.opacity")
		produced_files.append("calG192.opacity/table.dat")
		produced_files.append("calG192.opacity/table.lock")
		produced_files.append("calG192.opacity/ANTENNA")
		produced_files.append("calG192.opacity/ANTENNA/table.dat")
		produced_files.append("calG192.opacity/ANTENNA/table.lock")
		produced_files.append("calG192.opacity/ANTENNA/table.info")
		produced_files.append("calG192.opacity/ANTENNA/table.f0")
		produced_files.append("calG192.opacity/SPECTRAL_WINDOW")
		produced_files.append("calG192.opacity/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.opacity/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.opacity/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.opacity/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.opacity/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.opacity/HISTORY")
		produced_files.append("calG192.opacity/HISTORY/table.dat")
		produced_files.append("calG192.opacity/HISTORY/table.lock")
		produced_files.append("calG192.opacity/HISTORY/table.info")
		produced_files.append("calG192.opacity/HISTORY/table.f0")
		produced_files.append("calG192.opacity/FIELD")
		produced_files.append("calG192.opacity/FIELD/table.dat")
		produced_files.append("calG192.opacity/FIELD/table.lock")
		produced_files.append("calG192.opacity/FIELD/table.f0i")
		produced_files.append("calG192.opacity/FIELD/table.info")
		produced_files.append("calG192.opacity/FIELD/table.f0")
		produced_files.append("calG192.opacity/table.f0i")
		produced_files.append("calG192.opacity/table.info")
		produced_files.append("calG192.opacity/OBSERVATION")
		produced_files.append("calG192.opacity/OBSERVATION/table.dat")
		produced_files.append("calG192.opacity/OBSERVATION/table.lock")
		produced_files.append("calG192.opacity/OBSERVATION/table.info")
		produced_files.append("calG192.opacity/OBSERVATION/table.f0")
		produced_files.append("calG192.opacity/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_11(self):
		"""post method for "generate requantizer gains corrections"
		"""
		produced_files = []
		produced_files.append("calG192.requantizer")
		produced_files.append("calG192.requantizer/table.dat")
		produced_files.append("calG192.requantizer/table.lock")
		produced_files.append("calG192.requantizer/ANTENNA")
		produced_files.append("calG192.requantizer/ANTENNA/table.dat")
		produced_files.append("calG192.requantizer/ANTENNA/table.lock")
		produced_files.append("calG192.requantizer/ANTENNA/table.info")
		produced_files.append("calG192.requantizer/ANTENNA/table.f0")
		produced_files.append("calG192.requantizer/SPECTRAL_WINDOW")
		produced_files.append("calG192.requantizer/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.requantizer/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.requantizer/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.requantizer/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.requantizer/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.requantizer/HISTORY")
		produced_files.append("calG192.requantizer/HISTORY/table.dat")
		produced_files.append("calG192.requantizer/HISTORY/table.lock")
		produced_files.append("calG192.requantizer/HISTORY/table.info")
		produced_files.append("calG192.requantizer/HISTORY/table.f0")
		produced_files.append("calG192.requantizer/FIELD")
		produced_files.append("calG192.requantizer/FIELD/table.dat")
		produced_files.append("calG192.requantizer/FIELD/table.lock")
		produced_files.append("calG192.requantizer/FIELD/table.f0i")
		produced_files.append("calG192.requantizer/FIELD/table.info")
		produced_files.append("calG192.requantizer/FIELD/table.f0")
		produced_files.append("calG192.requantizer/table.f0i")
		produced_files.append("calG192.requantizer/table.info")
		produced_files.append("calG192.requantizer/OBSERVATION")
		produced_files.append("calG192.requantizer/OBSERVATION/table.dat")
		produced_files.append("calG192.requantizer/OBSERVATION/table.lock")
		produced_files.append("calG192.requantizer/OBSERVATION/table.info")
		produced_files.append("calG192.requantizer/OBSERVATION/table.f0")
		produced_files.append("calG192.requantizer/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_12(self):
		"""post method for "phase only calibration"
		"""
		produced_files = []
		produced_files.append("calG192.G0")
		produced_files.append("calG192.G0/table.dat")
		produced_files.append("calG192.G0/table.lock")
		produced_files.append("calG192.G0/ANTENNA")
		produced_files.append("calG192.G0/ANTENNA/table.dat")
		produced_files.append("calG192.G0/ANTENNA/table.lock")
		produced_files.append("calG192.G0/ANTENNA/table.info")
		produced_files.append("calG192.G0/ANTENNA/table.f0")
		produced_files.append("calG192.G0/SPECTRAL_WINDOW")
		produced_files.append("calG192.G0/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G0/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G0/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G0/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G0/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G0/HISTORY")
		produced_files.append("calG192.G0/HISTORY/table.dat")
		produced_files.append("calG192.G0/HISTORY/table.lock")
		produced_files.append("calG192.G0/HISTORY/table.info")
		produced_files.append("calG192.G0/HISTORY/table.f0")
		produced_files.append("calG192.G0/FIELD")
		produced_files.append("calG192.G0/FIELD/table.dat")
		produced_files.append("calG192.G0/FIELD/table.lock")
		produced_files.append("calG192.G0/FIELD/table.f0i")
		produced_files.append("calG192.G0/FIELD/table.info")
		produced_files.append("calG192.G0/FIELD/table.f0")
		produced_files.append("calG192.G0/table.f0i")
		produced_files.append("calG192.G0/table.info")
		produced_files.append("calG192.G0/OBSERVATION")
		produced_files.append("calG192.G0/OBSERVATION/table.dat")
		produced_files.append("calG192.G0/OBSERVATION/table.lock")
		produced_files.append("calG192.G0/OBSERVATION/table.info")
		produced_files.append("calG192.G0/OBSERVATION/table.f0")
		produced_files.append("calG192.G0/table.f0")
		
		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_13(self):
		"""post method for "residual delays"
		"""
		produced_files = []
		produced_files.append("calG192.K0")
		produced_files.append("calG192.K0/table.dat")
		produced_files.append("calG192.K0/table.lock")
		produced_files.append("calG192.K0/ANTENNA")
		produced_files.append("calG192.K0/ANTENNA/table.dat")
		produced_files.append("calG192.K0/ANTENNA/table.lock")
		produced_files.append("calG192.K0/ANTENNA/table.info")
		produced_files.append("calG192.K0/ANTENNA/table.f0")
		produced_files.append("calG192.K0/SPECTRAL_WINDOW")
		produced_files.append("calG192.K0/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.K0/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.K0/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.K0/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.K0/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.K0/HISTORY")
		produced_files.append("calG192.K0/HISTORY/table.dat")
		produced_files.append("calG192.K0/HISTORY/table.lock")
		produced_files.append("calG192.K0/HISTORY/table.info")
		produced_files.append("calG192.K0/HISTORY/table.f0")
		produced_files.append("calG192.K0/FIELD")
		produced_files.append("calG192.K0/FIELD/table.dat")
		produced_files.append("calG192.K0/FIELD/table.lock")
		produced_files.append("calG192.K0/FIELD/table.f0i")
		produced_files.append("calG192.K0/FIELD/table.info")
		produced_files.append("calG192.K0/FIELD/table.f0")
		produced_files.append("calG192.K0/table.f0i")
		produced_files.append("calG192.K0/table.info")
		produced_files.append("calG192.K0/OBSERVATION")
		produced_files.append("calG192.K0/OBSERVATION/table.dat")
		produced_files.append("calG192.K0/OBSERVATION/table.lock")
		produced_files.append("calG192.K0/OBSERVATION/table.info")
		produced_files.append("calG192.K0/OBSERVATION/table.f0")
		produced_files.append("calG192.K0/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_14(self):
		"""post method for "antenna bandpasses"
		"""
		produced_files = []
		produced_files.append("calG192.B0")
		produced_files.append("calG192.B0/table.dat")
		produced_files.append("calG192.B0/table.lock")
		produced_files.append("calG192.B0/ANTENNA")
		produced_files.append("calG192.B0/ANTENNA/table.dat")
		produced_files.append("calG192.B0/ANTENNA/table.lock")
		produced_files.append("calG192.B0/ANTENNA/table.info")
		produced_files.append("calG192.B0/ANTENNA/table.f0")
		produced_files.append("calG192.B0/SPECTRAL_WINDOW")
		produced_files.append("calG192.B0/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.B0/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.B0/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.B0/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.B0/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.B0/HISTORY")
		produced_files.append("calG192.B0/HISTORY/table.dat")
		produced_files.append("calG192.B0/HISTORY/table.lock")
		produced_files.append("calG192.B0/HISTORY/table.info")
		produced_files.append("calG192.B0/HISTORY/table.f0")
		produced_files.append("calG192.B0/FIELD")
		produced_files.append("calG192.B0/FIELD/table.dat")
		produced_files.append("calG192.B0/FIELD/table.lock")
		produced_files.append("calG192.B0/FIELD/table.f0i")
		produced_files.append("calG192.B0/FIELD/table.info")
		produced_files.append("calG192.B0/FIELD/table.f0")
		produced_files.append("calG192.B0/table.f0i")
		produced_files.append("calG192.B0/table.info")
		produced_files.append("calG192.B0/OBSERVATION")
		produced_files.append("calG192.B0/OBSERVATION/table.dat")
		produced_files.append("calG192.B0/OBSERVATION/table.lock")
		produced_files.append("calG192.B0/OBSERVATION/table.info")
		produced_files.append("calG192.B0/OBSERVATION/table.f0")
		produced_files.append("calG192.B0/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_15(self):
		"""post method for "flux and bandpass calibrators gain"
		"""
		produced_files = []
		produced_files.append("calG192.G1")
		produced_files.append("calG192.G1/table.dat")
		produced_files.append("calG192.G1/table.lock")
		produced_files.append("calG192.G1/ANTENNA")
		produced_files.append("calG192.G1/ANTENNA/table.dat")
		produced_files.append("calG192.G1/ANTENNA/table.lock")
		produced_files.append("calG192.G1/ANTENNA/table.info")
		produced_files.append("calG192.G1/ANTENNA/table.f0")
		produced_files.append("calG192.G1/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1/HISTORY")
		produced_files.append("calG192.G1/HISTORY/table.dat")
		produced_files.append("calG192.G1/HISTORY/table.lock")
		produced_files.append("calG192.G1/HISTORY/table.info")
		produced_files.append("calG192.G1/HISTORY/table.f0")
		produced_files.append("calG192.G1/FIELD")
		produced_files.append("calG192.G1/FIELD/table.dat")
		produced_files.append("calG192.G1/FIELD/table.lock")
		produced_files.append("calG192.G1/FIELD/table.f0i")
		produced_files.append("calG192.G1/FIELD/table.info")
		produced_files.append("calG192.G1/FIELD/table.f0")
		produced_files.append("calG192.G1/table.f0i")
		produced_files.append("calG192.G1/table.info")
		produced_files.append("calG192.G1/OBSERVATION")
		produced_files.append("calG192.G1/OBSERVATION/table.dat")
		produced_files.append("calG192.G1/OBSERVATION/table.lock")
		produced_files.append("calG192.G1/OBSERVATION/table.info")
		produced_files.append("calG192.G1/OBSERVATION/table.f0")
		produced_files.append("calG192.G1/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_16(self):
		"""post method for "bandpass calibrator gain amplitudes scaling"
		"""
		RegressionHelper.assert_file("%s/3C84.fluxinfo" % os.getcwd())

	def post_17(self):
		"""post method for "spectral information"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_18(self):
		"""post method for "phase only recalibration"
		"""
		produced_files = []
		produced_files.append("calG192.G0.b")
		produced_files.append("calG192.G0.b/table.dat")
		produced_files.append("calG192.G0.b/table.lock")
		produced_files.append("calG192.G0.b/ANTENNA")
		produced_files.append("calG192.G0.b/ANTENNA/table.dat")
		produced_files.append("calG192.G0.b/ANTENNA/table.lock")
		produced_files.append("calG192.G0.b/ANTENNA/table.info")
		produced_files.append("calG192.G0.b/ANTENNA/table.f0")
		produced_files.append("calG192.G0.b/SPECTRAL_WINDOW")
		produced_files.append("calG192.G0.b/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G0.b/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G0.b/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G0.b/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G0.b/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G0.b/HISTORY")
		produced_files.append("calG192.G0.b/HISTORY/table.dat")
		produced_files.append("calG192.G0.b/HISTORY/table.lock")
		produced_files.append("calG192.G0.b/HISTORY/table.info")
		produced_files.append("calG192.G0.b/HISTORY/table.f0")
		produced_files.append("calG192.G0.b/FIELD")
		produced_files.append("calG192.G0.b/FIELD/table.dat")
		produced_files.append("calG192.G0.b/FIELD/table.lock")
		produced_files.append("calG192.G0.b/FIELD/table.f0i")
		produced_files.append("calG192.G0.b/FIELD/table.info")
		produced_files.append("calG192.G0.b/FIELD/table.f0")
		produced_files.append("calG192.G0.b/table.f0i")
		produced_files.append("calG192.G0.b/table.info")
		produced_files.append("calG192.G0.b/OBSERVATION")
		produced_files.append("calG192.G0.b/OBSERVATION/table.dat")
		produced_files.append("calG192.G0.b/OBSERVATION/table.lock")
		produced_files.append("calG192.G0.b/OBSERVATION/table.info")
		produced_files.append("calG192.G0.b/OBSERVATION/table.f0")
		produced_files.append("calG192.G0.b/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_19(self):
		"""post method for "residual delays recalibration"
		"""
		produced_files = []
		produced_files.append("calG192.K0.b")
		produced_files.append("calG192.K0.b/table.dat")
		produced_files.append("calG192.K0.b/table.lock")
		produced_files.append("calG192.K0.b/ANTENNA")
		produced_files.append("calG192.K0.b/ANTENNA/table.dat")
		produced_files.append("calG192.K0.b/ANTENNA/table.lock")
		produced_files.append("calG192.K0.b/ANTENNA/table.info")
		produced_files.append("calG192.K0.b/ANTENNA/table.f0")
		produced_files.append("calG192.K0.b/SPECTRAL_WINDOW")
		produced_files.append("calG192.K0.b/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.K0.b/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.K0.b/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.K0.b/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.K0.b/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.K0.b/HISTORY")
		produced_files.append("calG192.K0.b/HISTORY/table.dat")
		produced_files.append("calG192.K0.b/HISTORY/table.lock")
		produced_files.append("calG192.K0.b/HISTORY/table.info")
		produced_files.append("calG192.K0.b/HISTORY/table.f0")
		produced_files.append("calG192.K0.b/FIELD")
		produced_files.append("calG192.K0.b/FIELD/table.dat")
		produced_files.append("calG192.K0.b/FIELD/table.lock")
		produced_files.append("calG192.K0.b/FIELD/table.f0i")
		produced_files.append("calG192.K0.b/FIELD/table.info")
		produced_files.append("calG192.K0.b/FIELD/table.f0")
		produced_files.append("calG192.K0.b/table.f0i")
		produced_files.append("calG192.K0.b/table.info")
		produced_files.append("calG192.K0.b/OBSERVATION")
		produced_files.append("calG192.K0.b/OBSERVATION/table.dat")
		produced_files.append("calG192.K0.b/OBSERVATION/table.lock")
		produced_files.append("calG192.K0.b/OBSERVATION/table.info")
		produced_files.append("calG192.K0.b/OBSERVATION/table.f0")
		produced_files.append("calG192.K0.b/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_20(self):
		"""post method for "antenna bandpasses recalibration"
		"""
		produced_files = []
		produced_files.append("calG192.B0.b")
		produced_files.append("calG192.B0.b/table.dat")
		produced_files.append("calG192.B0.b/table.lock")
		produced_files.append("calG192.B0.b/ANTENNA")
		produced_files.append("calG192.B0.b/ANTENNA/table.dat")
		produced_files.append("calG192.B0.b/ANTENNA/table.lock")
		produced_files.append("calG192.B0.b/ANTENNA/table.info")
		produced_files.append("calG192.B0.b/ANTENNA/table.f0")
		produced_files.append("calG192.B0.b/SPECTRAL_WINDOW")
		produced_files.append("calG192.B0.b/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.B0.b/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.B0.b/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.B0.b/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.B0.b/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.B0.b/HISTORY")
		produced_files.append("calG192.B0.b/HISTORY/table.dat")
		produced_files.append("calG192.B0.b/HISTORY/table.lock")
		produced_files.append("calG192.B0.b/HISTORY/table.info")
		produced_files.append("calG192.B0.b/HISTORY/table.f0")
		produced_files.append("calG192.B0.b/FIELD")
		produced_files.append("calG192.B0.b/FIELD/table.dat")
		produced_files.append("calG192.B0.b/FIELD/table.lock")
		produced_files.append("calG192.B0.b/FIELD/table.f0i")
		produced_files.append("calG192.B0.b/FIELD/table.info")
		produced_files.append("calG192.B0.b/FIELD/table.f0")
		produced_files.append("calG192.B0.b/table.f0i")
		produced_files.append("calG192.B0.b/table.info")
		produced_files.append("calG192.B0.b/OBSERVATION")
		produced_files.append("calG192.B0.b/OBSERVATION/table.dat")
		produced_files.append("calG192.B0.b/OBSERVATION/table.lock")
		produced_files.append("calG192.B0.b/OBSERVATION/table.info")
		produced_files.append("calG192.B0.b/OBSERVATION/table.f0")
		produced_files.append("calG192.B0.b/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_21(self):
		"""post method for "compute gain phases using 3C147"
		"""
		produced_files = []
		produced_files.append("calG192.G1.int")
		produced_files.append("calG192.G1.int/table.dat")
		produced_files.append("calG192.G1.int/table.lock")
		produced_files.append("calG192.G1.int/ANTENNA")
		produced_files.append("calG192.G1.int/ANTENNA/table.dat")
		produced_files.append("calG192.G1.int/ANTENNA/table.lock")
		produced_files.append("calG192.G1.int/ANTENNA/table.info")
		produced_files.append("calG192.G1.int/ANTENNA/table.f0")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.int/HISTORY")
		produced_files.append("calG192.G1.int/HISTORY/table.dat")
		produced_files.append("calG192.G1.int/HISTORY/table.lock")
		produced_files.append("calG192.G1.int/HISTORY/table.info")
		produced_files.append("calG192.G1.int/HISTORY/table.f0")
		produced_files.append("calG192.G1.int/FIELD")
		produced_files.append("calG192.G1.int/FIELD/table.dat")
		produced_files.append("calG192.G1.int/FIELD/table.lock")
		produced_files.append("calG192.G1.int/FIELD/table.f0i")
		produced_files.append("calG192.G1.int/FIELD/table.info")
		produced_files.append("calG192.G1.int/FIELD/table.f0")
		produced_files.append("calG192.G1.int/table.f0i")
		produced_files.append("calG192.G1.int/table.info")
		produced_files.append("calG192.G1.int/OBSERVATION")
		produced_files.append("calG192.G1.int/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.int/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.int/OBSERVATION/table.info")
		produced_files.append("calG192.G1.int/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.int/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_22(self):
		"""post method for "compute gain phases using J0603+174"
		"""
		produced_files = []
		produced_files.append("calG192.G1.int")
		produced_files.append("calG192.G1.int/table.dat")
		produced_files.append("calG192.G1.int/table.lock")
		produced_files.append("calG192.G1.int/ANTENNA")
		produced_files.append("calG192.G1.int/ANTENNA/table.dat")
		produced_files.append("calG192.G1.int/ANTENNA/table.lock")
		produced_files.append("calG192.G1.int/ANTENNA/table.info")
		produced_files.append("calG192.G1.int/ANTENNA/table.f0")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.int/HISTORY")
		produced_files.append("calG192.G1.int/HISTORY/table.dat")
		produced_files.append("calG192.G1.int/HISTORY/table.lock")
		produced_files.append("calG192.G1.int/HISTORY/table.info")
		produced_files.append("calG192.G1.int/HISTORY/table.f0")
		produced_files.append("calG192.G1.int/FIELD")
		produced_files.append("calG192.G1.int/FIELD/table.dat")
		produced_files.append("calG192.G1.int/FIELD/table.lock")
		produced_files.append("calG192.G1.int/FIELD/table.f0i")
		produced_files.append("calG192.G1.int/FIELD/table.info")
		produced_files.append("calG192.G1.int/FIELD/table.f0")
		produced_files.append("calG192.G1.int/table.f0i")
		produced_files.append("calG192.G1.int/table.info")
		produced_files.append("calG192.G1.int/OBSERVATION")
		produced_files.append("calG192.G1.int/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.int/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.int/OBSERVATION/table.info")
		produced_files.append("calG192.G1.int/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.int/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_23(self):
		"""post method for "compute gain phases using 3C84"
		"""
		produced_files = []
		produced_files.append("calG192.G1.int")
		produced_files.append("calG192.G1.int/table.dat")
		produced_files.append("calG192.G1.int/table.lock")
		produced_files.append("calG192.G1.int/ANTENNA")
		produced_files.append("calG192.G1.int/ANTENNA/table.dat")
		produced_files.append("calG192.G1.int/ANTENNA/table.lock")
		produced_files.append("calG192.G1.int/ANTENNA/table.info")
		produced_files.append("calG192.G1.int/ANTENNA/table.f0")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.int/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.int/HISTORY")
		produced_files.append("calG192.G1.int/HISTORY/table.dat")
		produced_files.append("calG192.G1.int/HISTORY/table.lock")
		produced_files.append("calG192.G1.int/HISTORY/table.info")
		produced_files.append("calG192.G1.int/HISTORY/table.f0")
		produced_files.append("calG192.G1.int/FIELD")
		produced_files.append("calG192.G1.int/FIELD/table.dat")
		produced_files.append("calG192.G1.int/FIELD/table.lock")
		produced_files.append("calG192.G1.int/FIELD/table.f0i")
		produced_files.append("calG192.G1.int/FIELD/table.info")
		produced_files.append("calG192.G1.int/FIELD/table.f0")
		produced_files.append("calG192.G1.int/table.f0i")
		produced_files.append("calG192.G1.int/table.info")
		produced_files.append("calG192.G1.int/OBSERVATION")
		produced_files.append("calG192.G1.int/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.int/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.int/OBSERVATION/table.info")
		produced_files.append("calG192.G1.int/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.int/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_24(self):
		"""post method for "applying phase calibration"
		"""
		produced_files = []
		produced_files.append("calG192.G1.inf")
		produced_files.append("calG192.G1.inf/table.dat")
		produced_files.append("calG192.G1.inf/table.lock")
		produced_files.append("calG192.G1.inf/ANTENNA")
		produced_files.append("calG192.G1.inf/ANTENNA/table.dat")
		produced_files.append("calG192.G1.inf/ANTENNA/table.lock")
		produced_files.append("calG192.G1.inf/ANTENNA/table.info")
		produced_files.append("calG192.G1.inf/ANTENNA/table.f0")
		produced_files.append("calG192.G1.inf/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.inf/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.inf/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.inf/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.inf/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.inf/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.inf/HISTORY")
		produced_files.append("calG192.G1.inf/HISTORY/table.dat")
		produced_files.append("calG192.G1.inf/HISTORY/table.lock")
		produced_files.append("calG192.G1.inf/HISTORY/table.info")
		produced_files.append("calG192.G1.inf/HISTORY/table.f0")
		produced_files.append("calG192.G1.inf/FIELD")
		produced_files.append("calG192.G1.inf/FIELD/table.dat")
		produced_files.append("calG192.G1.inf/FIELD/table.lock")
		produced_files.append("calG192.G1.inf/FIELD/table.f0i")
		produced_files.append("calG192.G1.inf/FIELD/table.info")
		produced_files.append("calG192.G1.inf/FIELD/table.f0")
		produced_files.append("calG192.G1.inf/table.f0i")
		produced_files.append("calG192.G1.inf/table.info")
		produced_files.append("calG192.G1.inf/OBSERVATION")
		produced_files.append("calG192.G1.inf/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.inf/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.inf/OBSERVATION/table.info")
		produced_files.append("calG192.G1.inf/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.inf/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_25(self):
		"""post method for "3C147 scan solving amplitudes"
		"""
		produced_files = []
		produced_files.append("calG192.G2")
		produced_files.append("calG192.G2/table.dat")
		produced_files.append("calG192.G2/table.lock")
		produced_files.append("calG192.G2/ANTENNA")
		produced_files.append("calG192.G2/ANTENNA/table.dat")
		produced_files.append("calG192.G2/ANTENNA/table.lock")
		produced_files.append("calG192.G2/ANTENNA/table.info")
		produced_files.append("calG192.G2/ANTENNA/table.f0")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G2/HISTORY")
		produced_files.append("calG192.G2/HISTORY/table.dat")
		produced_files.append("calG192.G2/HISTORY/table.lock")
		produced_files.append("calG192.G2/HISTORY/table.info")
		produced_files.append("calG192.G2/HISTORY/table.f0")
		produced_files.append("calG192.G2/FIELD")
		produced_files.append("calG192.G2/FIELD/table.dat")
		produced_files.append("calG192.G2/FIELD/table.lock")
		produced_files.append("calG192.G2/FIELD/table.f0i")
		produced_files.append("calG192.G2/FIELD/table.info")
		produced_files.append("calG192.G2/FIELD/table.f0")
		produced_files.append("calG192.G2/table.f0i")
		produced_files.append("calG192.G2/table.info")
		produced_files.append("calG192.G2/OBSERVATION")
		produced_files.append("calG192.G2/OBSERVATION/table.dat")
		produced_files.append("calG192.G2/OBSERVATION/table.lock")
		produced_files.append("calG192.G2/OBSERVATION/table.info")
		produced_files.append("calG192.G2/OBSERVATION/table.f0")
		produced_files.append("calG192.G2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_26(self):
		"""post method for "J0603+174  scan solving amplitudes"
		"""
		produced_files = []
		produced_files.append("calG192.G2")
		produced_files.append("calG192.G2/table.dat")
		produced_files.append("calG192.G2/table.lock")
		produced_files.append("calG192.G2/ANTENNA")
		produced_files.append("calG192.G2/ANTENNA/table.dat")
		produced_files.append("calG192.G2/ANTENNA/table.lock")
		produced_files.append("calG192.G2/ANTENNA/table.info")
		produced_files.append("calG192.G2/ANTENNA/table.f0")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G2/HISTORY")
		produced_files.append("calG192.G2/HISTORY/table.dat")
		produced_files.append("calG192.G2/HISTORY/table.lock")
		produced_files.append("calG192.G2/HISTORY/table.info")
		produced_files.append("calG192.G2/HISTORY/table.f0")
		produced_files.append("calG192.G2/FIELD")
		produced_files.append("calG192.G2/FIELD/table.dat")
		produced_files.append("calG192.G2/FIELD/table.lock")
		produced_files.append("calG192.G2/FIELD/table.f0i")
		produced_files.append("calG192.G2/FIELD/table.info")
		produced_files.append("calG192.G2/FIELD/table.f0")
		produced_files.append("calG192.G2/table.f0i")
		produced_files.append("calG192.G2/table.info")
		produced_files.append("calG192.G2/OBSERVATION")
		produced_files.append("calG192.G2/OBSERVATION/table.dat")
		produced_files.append("calG192.G2/OBSERVATION/table.lock")
		produced_files.append("calG192.G2/OBSERVATION/table.info")
		produced_files.append("calG192.G2/OBSERVATION/table.f0")
		produced_files.append("calG192.G2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_27(self):
		"""post method for "3C84 scan solving amplitudes"
		"""
		produced_files = []
		produced_files.append("calG192.G2")
		produced_files.append("calG192.G2/table.dat")
		produced_files.append("calG192.G2/table.lock")
		produced_files.append("calG192.G2/ANTENNA")
		produced_files.append("calG192.G2/ANTENNA/table.dat")
		produced_files.append("calG192.G2/ANTENNA/table.lock")
		produced_files.append("calG192.G2/ANTENNA/table.info")
		produced_files.append("calG192.G2/ANTENNA/table.f0")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G2/HISTORY")
		produced_files.append("calG192.G2/HISTORY/table.dat")
		produced_files.append("calG192.G2/HISTORY/table.lock")
		produced_files.append("calG192.G2/HISTORY/table.info")
		produced_files.append("calG192.G2/HISTORY/table.f0")
		produced_files.append("calG192.G2/FIELD")
		produced_files.append("calG192.G2/FIELD/table.dat")
		produced_files.append("calG192.G2/FIELD/table.lock")
		produced_files.append("calG192.G2/FIELD/table.f0i")
		produced_files.append("calG192.G2/FIELD/table.info")
		produced_files.append("calG192.G2/FIELD/table.f0")
		produced_files.append("calG192.G2/table.f0i")
		produced_files.append("calG192.G2/table.info")
		produced_files.append("calG192.G2/OBSERVATION")
		produced_files.append("calG192.G2/OBSERVATION/table.dat")
		produced_files.append("calG192.G2/OBSERVATION/table.lock")
		produced_files.append("calG192.G2/OBSERVATION/table.info")
		produced_files.append("calG192.G2/OBSERVATION/table.f0")
		produced_files.append("calG192.G2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_28(self):
		"""post method for "using fluxscale to transfer the amplitude solutions"
		"""
		produced_files = []
		produced_files.append("calG192.F2")
		produced_files.append("calG192.F2/table.dat")
		produced_files.append("calG192.F2/table.lock")
		produced_files.append("calG192.F2/ANTENNA")
		produced_files.append("calG192.F2/ANTENNA/table.dat")
		produced_files.append("calG192.F2/ANTENNA/table.lock")
		produced_files.append("calG192.F2/ANTENNA/table.info")
		produced_files.append("calG192.F2/ANTENNA/table.f0")
		produced_files.append("calG192.F2/SPECTRAL_WINDOW")
		produced_files.append("calG192.F2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.F2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.F2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.F2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.F2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.F2/HISTORY")
		produced_files.append("calG192.F2/HISTORY/table.dat")
		produced_files.append("calG192.F2/HISTORY/table.lock")
		produced_files.append("calG192.F2/HISTORY/table.info")
		produced_files.append("calG192.F2/HISTORY/table.f0")
		produced_files.append("calG192.F2/FIELD")
		produced_files.append("calG192.F2/FIELD/table.dat")
		produced_files.append("calG192.F2/FIELD/table.lock")
		produced_files.append("calG192.F2/FIELD/table.f0i")
		produced_files.append("calG192.F2/FIELD/table.info")
		produced_files.append("calG192.F2/FIELD/table.f0")
		produced_files.append("calG192.F2/table.f0i")
		produced_files.append("calG192.F2/table.info")
		produced_files.append("calG192.F2/OBSERVATION")
		produced_files.append("calG192.F2/OBSERVATION/table.dat")
		produced_files.append("calG192.F2/OBSERVATION/table.lock")
		produced_files.append("calG192.F2/OBSERVATION/table.info")
		produced_files.append("calG192.F2/OBSERVATION/table.f0")
		produced_files.append("calG192.F2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_29(self):
		"""post method for "3C147 accumulated calibration"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_30(self):
		"""post method for "gain accumulated calibration"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_31(self):
		"""post method for "G192 accumulated calibration"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_32(self):
		"""post method for "3C84 accumulated calibration"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_33(self):
		"""post method for "flagging isolated RFI"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_34(self):
		"""post method for "baseline flagging"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_35(self):
		"""post method for "3C147 density model"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_36(self):
		"""post method for "3C84 spectral information column"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_37(self):
		"""post method for "initial phase calibration"
		"""
		produced_files = []
		produced_files.append("calG192.G0.b.2")
		produced_files.append("calG192.G0.b.2/table.dat")
		produced_files.append("calG192.G0.b.2/table.lock")
		produced_files.append("calG192.G0.b.2/ANTENNA")
		produced_files.append("calG192.G0.b.2/ANTENNA/table.dat")
		produced_files.append("calG192.G0.b.2/ANTENNA/table.lock")
		produced_files.append("calG192.G0.b.2/ANTENNA/table.info")
		produced_files.append("calG192.G0.b.2/ANTENNA/table.f0")
		produced_files.append("calG192.G0.b.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G0.b.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G0.b.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G0.b.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G0.b.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G0.b.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G0.b.2/HISTORY")
		produced_files.append("calG192.G0.b.2/HISTORY/table.dat")
		produced_files.append("calG192.G0.b.2/HISTORY/table.lock")
		produced_files.append("calG192.G0.b.2/HISTORY/table.info")
		produced_files.append("calG192.G0.b.2/HISTORY/table.f0")
		produced_files.append("calG192.G0.b.2/FIELD")
		produced_files.append("calG192.G0.b.2/FIELD/table.dat")
		produced_files.append("calG192.G0.b.2/FIELD/table.lock")
		produced_files.append("calG192.G0.b.2/FIELD/table.f0i")
		produced_files.append("calG192.G0.b.2/FIELD/table.info")
		produced_files.append("calG192.G0.b.2/FIELD/table.f0")
		produced_files.append("calG192.G0.b.2/table.f0i")
		produced_files.append("calG192.G0.b.2/table.info")
		produced_files.append("calG192.G0.b.2/OBSERVATION")
		produced_files.append("calG192.G0.b.2/OBSERVATION/table.dat")
		produced_files.append("calG192.G0.b.2/OBSERVATION/table.lock")
		produced_files.append("calG192.G0.b.2/OBSERVATION/table.info")
		produced_files.append("calG192.G0.b.2/OBSERVATION/table.f0")
		produced_files.append("calG192.G0.b.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_38(self):
		"""post method for "delay calibration"
		"""
		produced_files = []
		produced_files.append("calG192.K0.b.2")
		produced_files.append("calG192.K0.b.2/table.dat")
		produced_files.append("calG192.K0.b.2/table.lock")
		produced_files.append("calG192.K0.b.2/ANTENNA")
		produced_files.append("calG192.K0.b.2/ANTENNA/table.dat")
		produced_files.append("calG192.K0.b.2/ANTENNA/table.lock")
		produced_files.append("calG192.K0.b.2/ANTENNA/table.info")
		produced_files.append("calG192.K0.b.2/ANTENNA/table.f0")
		produced_files.append("calG192.K0.b.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.K0.b.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.K0.b.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.K0.b.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.K0.b.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.K0.b.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.K0.b.2/HISTORY")
		produced_files.append("calG192.K0.b.2/HISTORY/table.dat")
		produced_files.append("calG192.K0.b.2/HISTORY/table.lock")
		produced_files.append("calG192.K0.b.2/HISTORY/table.info")
		produced_files.append("calG192.K0.b.2/HISTORY/table.f0")
		produced_files.append("calG192.K0.b.2/FIELD")
		produced_files.append("calG192.K0.b.2/FIELD/table.dat")
		produced_files.append("calG192.K0.b.2/FIELD/table.lock")
		produced_files.append("calG192.K0.b.2/FIELD/table.f0i")
		produced_files.append("calG192.K0.b.2/FIELD/table.info")
		produced_files.append("calG192.K0.b.2/FIELD/table.f0")
		produced_files.append("calG192.K0.b.2/table.f0i")
		produced_files.append("calG192.K0.b.2/table.info")
		produced_files.append("calG192.K0.b.2/OBSERVATION")
		produced_files.append("calG192.K0.b.2/OBSERVATION/table.dat")
		produced_files.append("calG192.K0.b.2/OBSERVATION/table.lock")
		produced_files.append("calG192.K0.b.2/OBSERVATION/table.info")
		produced_files.append("calG192.K0.b.2/OBSERVATION/table.f0")
		produced_files.append("calG192.K0.b.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_39(self):
		"""post method for "bandpass calibration"
		"""
		produced_files = []
		produced_files.append("calG192.B0.b.2")
		produced_files.append("calG192.B0.b.2/table.dat")
		produced_files.append("calG192.B0.b.2/table.lock")
		produced_files.append("calG192.B0.b.2/ANTENNA")
		produced_files.append("calG192.B0.b.2/ANTENNA/table.dat")
		produced_files.append("calG192.B0.b.2/ANTENNA/table.lock")
		produced_files.append("calG192.B0.b.2/ANTENNA/table.info")
		produced_files.append("calG192.B0.b.2/ANTENNA/table.f0")
		produced_files.append("calG192.B0.b.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.B0.b.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.B0.b.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.B0.b.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.B0.b.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.B0.b.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.B0.b.2/HISTORY")
		produced_files.append("calG192.B0.b.2/HISTORY/table.dat")
		produced_files.append("calG192.B0.b.2/HISTORY/table.lock")
		produced_files.append("calG192.B0.b.2/HISTORY/table.info")
		produced_files.append("calG192.B0.b.2/HISTORY/table.f0")
		produced_files.append("calG192.B0.b.2/FIELD")
		produced_files.append("calG192.B0.b.2/FIELD/table.dat")
		produced_files.append("calG192.B0.b.2/FIELD/table.lock")
		produced_files.append("calG192.B0.b.2/FIELD/table.f0i")
		produced_files.append("calG192.B0.b.2/FIELD/table.info")
		produced_files.append("calG192.B0.b.2/FIELD/table.f0")
		produced_files.append("calG192.B0.b.2/table.f0i")
		produced_files.append("calG192.B0.b.2/table.info")
		produced_files.append("calG192.B0.b.2/OBSERVATION")
		produced_files.append("calG192.B0.b.2/OBSERVATION/table.dat")
		produced_files.append("calG192.B0.b.2/OBSERVATION/table.lock")
		produced_files.append("calG192.B0.b.2/OBSERVATION/table.info")
		produced_files.append("calG192.B0.b.2/OBSERVATION/table.f0")
		produced_files.append("calG192.B0.b.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_40(self):
		"""post method for "phase gain calibration field 0"
		"""
		produced_files = []
		produced_files.append("calG192.G1.int.2")
		produced_files.append("calG192.G1.int.2/table.dat")
		produced_files.append("calG192.G1.int.2/table.lock")
		produced_files.append("calG192.G1.int.2/ANTENNA")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.dat")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.lock")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.info")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.f0")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.int.2/HISTORY")
		produced_files.append("calG192.G1.int.2/HISTORY/table.dat")
		produced_files.append("calG192.G1.int.2/HISTORY/table.lock")
		produced_files.append("calG192.G1.int.2/HISTORY/table.info")
		produced_files.append("calG192.G1.int.2/HISTORY/table.f0")
		produced_files.append("calG192.G1.int.2/FIELD")
		produced_files.append("calG192.G1.int.2/FIELD/table.dat")
		produced_files.append("calG192.G1.int.2/FIELD/table.lock")
		produced_files.append("calG192.G1.int.2/FIELD/table.f0i")
		produced_files.append("calG192.G1.int.2/FIELD/table.info")
		produced_files.append("calG192.G1.int.2/FIELD/table.f0")
		produced_files.append("calG192.G1.int.2/table.f0i")
		produced_files.append("calG192.G1.int.2/table.info")
		produced_files.append("calG192.G1.int.2/OBSERVATION")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.info")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.int.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_41(self):
		"""post method for "phase gain calibration field 1"
		"""
		produced_files = []
		produced_files.append("calG192.G1.int.2")
		produced_files.append("calG192.G1.int.2/table.dat")
		produced_files.append("calG192.G1.int.2/table.lock")
		produced_files.append("calG192.G1.int.2/ANTENNA")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.dat")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.lock")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.info")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.f0")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.int.2/HISTORY")
		produced_files.append("calG192.G1.int.2/HISTORY/table.dat")
		produced_files.append("calG192.G1.int.2/HISTORY/table.lock")
		produced_files.append("calG192.G1.int.2/HISTORY/table.info")
		produced_files.append("calG192.G1.int.2/HISTORY/table.f0")
		produced_files.append("calG192.G1.int.2/FIELD")
		produced_files.append("calG192.G1.int.2/FIELD/table.dat")
		produced_files.append("calG192.G1.int.2/FIELD/table.lock")
		produced_files.append("calG192.G1.int.2/FIELD/table.f0i")
		produced_files.append("calG192.G1.int.2/FIELD/table.info")
		produced_files.append("calG192.G1.int.2/FIELD/table.f0")
		produced_files.append("calG192.G1.int.2/table.f0i")
		produced_files.append("calG192.G1.int.2/table.info")
		produced_files.append("calG192.G1.int.2/OBSERVATION")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.info")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.int.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_42(self):
		"""post method for "phase gain calibration field 3"
		"""
		produced_files = []
		produced_files.append("calG192.G1.int.2")
		produced_files.append("calG192.G1.int.2/table.dat")
		produced_files.append("calG192.G1.int.2/table.lock")
		produced_files.append("calG192.G1.int.2/ANTENNA")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.dat")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.lock")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.info")
		produced_files.append("calG192.G1.int.2/ANTENNA/table.f0")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.int.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.int.2/HISTORY")
		produced_files.append("calG192.G1.int.2/HISTORY/table.dat")
		produced_files.append("calG192.G1.int.2/HISTORY/table.lock")
		produced_files.append("calG192.G1.int.2/HISTORY/table.info")
		produced_files.append("calG192.G1.int.2/HISTORY/table.f0")
		produced_files.append("calG192.G1.int.2/FIELD")
		produced_files.append("calG192.G1.int.2/FIELD/table.dat")
		produced_files.append("calG192.G1.int.2/FIELD/table.lock")
		produced_files.append("calG192.G1.int.2/FIELD/table.f0i")
		produced_files.append("calG192.G1.int.2/FIELD/table.info")
		produced_files.append("calG192.G1.int.2/FIELD/table.f0")
		produced_files.append("calG192.G1.int.2/table.f0i")
		produced_files.append("calG192.G1.int.2/table.info")
		produced_files.append("calG192.G1.int.2/OBSERVATION")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.info")
		produced_files.append("calG192.G1.int.2/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.int.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_43(self):
		"""post method for "phase gain calibration infinite solution interval"
		"""
		produced_files = []
		produced_files.append("calG192.G1.inf.2")
		produced_files.append("calG192.G1.inf.2/table.dat")
		produced_files.append("calG192.G1.inf.2/table.lock")
		produced_files.append("calG192.G1.inf.2/ANTENNA")
		produced_files.append("calG192.G1.inf.2/ANTENNA/table.dat")
		produced_files.append("calG192.G1.inf.2/ANTENNA/table.lock")
		produced_files.append("calG192.G1.inf.2/ANTENNA/table.info")
		produced_files.append("calG192.G1.inf.2/ANTENNA/table.f0")
		produced_files.append("calG192.G1.inf.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G1.inf.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G1.inf.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G1.inf.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G1.inf.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G1.inf.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G1.inf.2/HISTORY")
		produced_files.append("calG192.G1.inf.2/HISTORY/table.dat")
		produced_files.append("calG192.G1.inf.2/HISTORY/table.lock")
		produced_files.append("calG192.G1.inf.2/HISTORY/table.info")
		produced_files.append("calG192.G1.inf.2/HISTORY/table.f0")
		produced_files.append("calG192.G1.inf.2/FIELD")
		produced_files.append("calG192.G1.inf.2/FIELD/table.dat")
		produced_files.append("calG192.G1.inf.2/FIELD/table.lock")
		produced_files.append("calG192.G1.inf.2/FIELD/table.f0i")
		produced_files.append("calG192.G1.inf.2/FIELD/table.info")
		produced_files.append("calG192.G1.inf.2/FIELD/table.f0")
		produced_files.append("calG192.G1.inf.2/table.f0i")
		produced_files.append("calG192.G1.inf.2/table.info")
		produced_files.append("calG192.G1.inf.2/OBSERVATION")
		produced_files.append("calG192.G1.inf.2/OBSERVATION/table.dat")
		produced_files.append("calG192.G1.inf.2/OBSERVATION/table.lock")
		produced_files.append("calG192.G1.inf.2/OBSERVATION/table.info")
		produced_files.append("calG192.G1.inf.2/OBSERVATION/table.f0")
		produced_files.append("calG192.G1.inf.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_44(self):
		"""post method for "amplitude calibration solutions field 0"
		"""
		produced_files = []
		produced_files.append("calG192.G2")
		produced_files.append("calG192.G2/table.dat")
		produced_files.append("calG192.G2/table.lock")
		produced_files.append("calG192.G2/ANTENNA")
		produced_files.append("calG192.G2/ANTENNA/table.dat")
		produced_files.append("calG192.G2/ANTENNA/table.lock")
		produced_files.append("calG192.G2/ANTENNA/table.info")
		produced_files.append("calG192.G2/ANTENNA/table.f0")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G2/HISTORY")
		produced_files.append("calG192.G2/HISTORY/table.dat")
		produced_files.append("calG192.G2/HISTORY/table.lock")
		produced_files.append("calG192.G2/HISTORY/table.info")
		produced_files.append("calG192.G2/HISTORY/table.f0")
		produced_files.append("calG192.G2/FIELD")
		produced_files.append("calG192.G2/FIELD/table.dat")
		produced_files.append("calG192.G2/FIELD/table.lock")
		produced_files.append("calG192.G2/FIELD/table.f0i")
		produced_files.append("calG192.G2/FIELD/table.info")
		produced_files.append("calG192.G2/FIELD/table.f0")
		produced_files.append("calG192.G2/table.f0i")
		produced_files.append("calG192.G2/table.info")
		produced_files.append("calG192.G2/OBSERVATION")
		produced_files.append("calG192.G2/OBSERVATION/table.dat")
		produced_files.append("calG192.G2/OBSERVATION/table.lock")
		produced_files.append("calG192.G2/OBSERVATION/table.info")
		produced_files.append("calG192.G2/OBSERVATION/table.f0")
		produced_files.append("calG192.G2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_45(self):
		"""post method for "amplitude calibration solutions field 1"
		"""
		produced_files = []
		produced_files.append("calG192.G2")
		produced_files.append("calG192.G2/table.dat")
		produced_files.append("calG192.G2/table.lock")
		produced_files.append("calG192.G2/ANTENNA")
		produced_files.append("calG192.G2/ANTENNA/table.dat")
		produced_files.append("calG192.G2/ANTENNA/table.lock")
		produced_files.append("calG192.G2/ANTENNA/table.info")
		produced_files.append("calG192.G2/ANTENNA/table.f0")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G2/HISTORY")
		produced_files.append("calG192.G2/HISTORY/table.dat")
		produced_files.append("calG192.G2/HISTORY/table.lock")
		produced_files.append("calG192.G2/HISTORY/table.info")
		produced_files.append("calG192.G2/HISTORY/table.f0")
		produced_files.append("calG192.G2/FIELD")
		produced_files.append("calG192.G2/FIELD/table.dat")
		produced_files.append("calG192.G2/FIELD/table.lock")
		produced_files.append("calG192.G2/FIELD/table.f0i")
		produced_files.append("calG192.G2/FIELD/table.info")
		produced_files.append("calG192.G2/FIELD/table.f0")
		produced_files.append("calG192.G2/table.f0i")
		produced_files.append("calG192.G2/table.info")
		produced_files.append("calG192.G2/OBSERVATION")
		produced_files.append("calG192.G2/OBSERVATION/table.dat")
		produced_files.append("calG192.G2/OBSERVATION/table.lock")
		produced_files.append("calG192.G2/OBSERVATION/table.info")
		produced_files.append("calG192.G2/OBSERVATION/table.f0")
		produced_files.append("calG192.G2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_46(self):
		"""post method for "amplitude calibration solutions field 3"
		"""
		produced_files = []
		produced_files.append("calG192.G2")
		produced_files.append("calG192.G2/table.dat")
		produced_files.append("calG192.G2/table.lock")
		produced_files.append("calG192.G2/ANTENNA")
		produced_files.append("calG192.G2/ANTENNA/table.dat")
		produced_files.append("calG192.G2/ANTENNA/table.lock")
		produced_files.append("calG192.G2/ANTENNA/table.info")
		produced_files.append("calG192.G2/ANTENNA/table.f0")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.G2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.G2/HISTORY")
		produced_files.append("calG192.G2/HISTORY/table.dat")
		produced_files.append("calG192.G2/HISTORY/table.lock")
		produced_files.append("calG192.G2/HISTORY/table.info")
		produced_files.append("calG192.G2/HISTORY/table.f0")
		produced_files.append("calG192.G2/FIELD")
		produced_files.append("calG192.G2/FIELD/table.dat")
		produced_files.append("calG192.G2/FIELD/table.lock")
		produced_files.append("calG192.G2/FIELD/table.f0i")
		produced_files.append("calG192.G2/FIELD/table.info")
		produced_files.append("calG192.G2/FIELD/table.f0")
		produced_files.append("calG192.G2/table.f0i")
		produced_files.append("calG192.G2/table.info")
		produced_files.append("calG192.G2/OBSERVATION")
		produced_files.append("calG192.G2/OBSERVATION/table.dat")
		produced_files.append("calG192.G2/OBSERVATION/table.lock")
		produced_files.append("calG192.G2/OBSERVATION/table.info")
		produced_files.append("calG192.G2/OBSERVATION/table.f0")
		produced_files.append("calG192.G2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_47(self):
		"""post method for "flux calibration solutions"
		"""
		produced_files = []
		produced_files.append("calG192.F2.2")
		produced_files.append("calG192.F2.2/table.dat")
		produced_files.append("calG192.F2.2/table.lock")
		produced_files.append("calG192.F2.2/ANTENNA")
		produced_files.append("calG192.F2.2/ANTENNA/table.dat")
		produced_files.append("calG192.F2.2/ANTENNA/table.lock")
		produced_files.append("calG192.F2.2/ANTENNA/table.info")
		produced_files.append("calG192.F2.2/ANTENNA/table.f0")
		produced_files.append("calG192.F2.2/SPECTRAL_WINDOW")
		produced_files.append("calG192.F2.2/SPECTRAL_WINDOW/table.dat")
		produced_files.append("calG192.F2.2/SPECTRAL_WINDOW/table.lock")
		produced_files.append("calG192.F2.2/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("calG192.F2.2/SPECTRAL_WINDOW/table.info")
		produced_files.append("calG192.F2.2/SPECTRAL_WINDOW/table.f0")
		produced_files.append("calG192.F2.2/HISTORY")
		produced_files.append("calG192.F2.2/HISTORY/table.dat")
		produced_files.append("calG192.F2.2/HISTORY/table.lock")
		produced_files.append("calG192.F2.2/HISTORY/table.info")
		produced_files.append("calG192.F2.2/HISTORY/table.f0")
		produced_files.append("calG192.F2.2/FIELD")
		produced_files.append("calG192.F2.2/FIELD/table.dat")
		produced_files.append("calG192.F2.2/FIELD/table.lock")
		produced_files.append("calG192.F2.2/FIELD/table.f0i")
		produced_files.append("calG192.F2.2/FIELD/table.info")
		produced_files.append("calG192.F2.2/FIELD/table.f0")
		produced_files.append("calG192.F2.2/table.f0i")
		produced_files.append("calG192.F2.2/table.info")
		produced_files.append("calG192.F2.2/OBSERVATION")
		produced_files.append("calG192.F2.2/OBSERVATION/table.dat")
		produced_files.append("calG192.F2.2/OBSERVATION/table.lock")
		produced_files.append("calG192.F2.2/OBSERVATION/table.info")
		produced_files.append("calG192.F2.2/OBSERVATION/table.f0")
		produced_files.append("calG192.F2.2/table.f0")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_48(self):
		"""post method for "apply calibration tables field 0"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_49(self):
		"""post method for "apply calibration tables field 1"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_50(self):
		"""post method for "apply calibration tables field 2"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_51(self):
		"""post method for "apply calibration tables field 3"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_52(self):
		"""post method for "splitting calibrated data 3C147"
		"""
		produced_files = []
		produced_files.append("3C147_split_6s.ms")
		produced_files.append("3C147_split_6s.ms/table.f19")
		produced_files.append("3C147_split_6s.ms/table.f2")
		produced_files.append("3C147_split_6s.ms/table.dat")
		produced_files.append("3C147_split_6s.ms/table.lock")
		produced_files.append("3C147_split_6s.ms/FLAG_CMD")
		produced_files.append("3C147_split_6s.ms/FLAG_CMD/table.dat")
		produced_files.append("3C147_split_6s.ms/FLAG_CMD/table.lock")
		produced_files.append("3C147_split_6s.ms/FLAG_CMD/table.info")
		produced_files.append("3C147_split_6s.ms/FLAG_CMD/table.f0")
		produced_files.append("3C147_split_6s.ms/SYSPOWER")
		produced_files.append("3C147_split_6s.ms/SYSPOWER/table.dat")
		produced_files.append("3C147_split_6s.ms/SYSPOWER/table.lock")
		produced_files.append("3C147_split_6s.ms/SYSPOWER/table.f0i")
		produced_files.append("3C147_split_6s.ms/SYSPOWER/table.info")
		produced_files.append("3C147_split_6s.ms/SYSPOWER/table.f0")
		produced_files.append("3C147_split_6s.ms/STATE")
		produced_files.append("3C147_split_6s.ms/STATE/table.dat")
		produced_files.append("3C147_split_6s.ms/STATE/table.lock")
		produced_files.append("3C147_split_6s.ms/STATE/table.info")
		produced_files.append("3C147_split_6s.ms/STATE/table.f0")
		produced_files.append("3C147_split_6s.ms/FEED")
		produced_files.append("3C147_split_6s.ms/FEED/table.dat")
		produced_files.append("3C147_split_6s.ms/FEED/table.lock")
		produced_files.append("3C147_split_6s.ms/FEED/table.f0i")
		produced_files.append("3C147_split_6s.ms/FEED/table.info")
		produced_files.append("3C147_split_6s.ms/FEED/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f10")
		produced_files.append("3C147_split_6s.ms/ANTENNA")
		produced_files.append("3C147_split_6s.ms/ANTENNA/table.dat")
		produced_files.append("3C147_split_6s.ms/ANTENNA/table.lock")
		produced_files.append("3C147_split_6s.ms/ANTENNA/table.info")
		produced_files.append("3C147_split_6s.ms/ANTENNA/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f18")
		produced_files.append("3C147_split_6s.ms/table.f20")
		produced_files.append("3C147_split_6s.ms/table.f12")
		produced_files.append("3C147_split_6s.ms/table.f11")
		produced_files.append("3C147_split_6s.ms/SPECTRAL_WINDOW")
		produced_files.append("3C147_split_6s.ms/SPECTRAL_WINDOW/table.dat")
		produced_files.append("3C147_split_6s.ms/SPECTRAL_WINDOW/table.lock")
		produced_files.append("3C147_split_6s.ms/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("3C147_split_6s.ms/SPECTRAL_WINDOW/table.info")
		produced_files.append("3C147_split_6s.ms/SPECTRAL_WINDOW/table.f0")
		produced_files.append("3C147_split_6s.ms/HISTORY")
		produced_files.append("3C147_split_6s.ms/HISTORY/table.dat")
		produced_files.append("3C147_split_6s.ms/HISTORY/table.lock")
		produced_files.append("3C147_split_6s.ms/HISTORY/table.info")
		produced_files.append("3C147_split_6s.ms/HISTORY/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f23")
		produced_files.append("3C147_split_6s.ms/table.f20_TSM0")
		produced_files.append("3C147_split_6s.ms/table.f16")
		produced_files.append("3C147_split_6s.ms/table.f1")
		produced_files.append("3C147_split_6s.ms/FIELD")
		produced_files.append("3C147_split_6s.ms/FIELD/table.dat")
		produced_files.append("3C147_split_6s.ms/FIELD/table.lock")
		produced_files.append("3C147_split_6s.ms/FIELD/table.f0i")
		produced_files.append("3C147_split_6s.ms/FIELD/table.info")
		produced_files.append("3C147_split_6s.ms/FIELD/table.f0")
		produced_files.append("3C147_split_6s.ms/DATA_DESCRIPTION")
		produced_files.append("3C147_split_6s.ms/DATA_DESCRIPTION/table.dat")
		produced_files.append("3C147_split_6s.ms/DATA_DESCRIPTION/table.lock")
		produced_files.append("3C147_split_6s.ms/DATA_DESCRIPTION/table.info")
		produced_files.append("3C147_split_6s.ms/DATA_DESCRIPTION/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f14")
		produced_files.append("3C147_split_6s.ms/table.f6")
		produced_files.append("3C147_split_6s.ms/SORTED_TABLE")
		produced_files.append("3C147_split_6s.ms/SORTED_TABLE/table.dat")
		produced_files.append("3C147_split_6s.ms/SORTED_TABLE/table.info")
		produced_files.append("3C147_split_6s.ms/POINTING")
		produced_files.append("3C147_split_6s.ms/POINTING/table.dat")
		produced_files.append("3C147_split_6s.ms/POINTING/table.lock")
		produced_files.append("3C147_split_6s.ms/POINTING/table.f0i")
		produced_files.append("3C147_split_6s.ms/POINTING/table.info")
		produced_files.append("3C147_split_6s.ms/POINTING/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f3")
		produced_files.append("3C147_split_6s.ms/table.f15")
		produced_files.append("3C147_split_6s.ms/table.f22")
		produced_files.append("3C147_split_6s.ms/table.f4")
		produced_files.append("3C147_split_6s.ms/table.f22_TSM1")
		produced_files.append("3C147_split_6s.ms/table.f5")
		produced_files.append("3C147_split_6s.ms/table.info")
		produced_files.append("3C147_split_6s.ms/PROCESSOR")
		produced_files.append("3C147_split_6s.ms/PROCESSOR/table.dat")
		produced_files.append("3C147_split_6s.ms/PROCESSOR/table.lock")
		produced_files.append("3C147_split_6s.ms/PROCESSOR/table.info")
		produced_files.append("3C147_split_6s.ms/PROCESSOR/table.f0")
		produced_files.append("3C147_split_6s.ms/POLARIZATION")
		produced_files.append("3C147_split_6s.ms/POLARIZATION/table.dat")
		produced_files.append("3C147_split_6s.ms/POLARIZATION/table.lock")
		produced_files.append("3C147_split_6s.ms/POLARIZATION/table.f0i")
		produced_files.append("3C147_split_6s.ms/POLARIZATION/table.info")
		produced_files.append("3C147_split_6s.ms/POLARIZATION/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f21_TSM1")
		produced_files.append("3C147_split_6s.ms/table.f21")
		produced_files.append("3C147_split_6s.ms/table.f8")
		produced_files.append("3C147_split_6s.ms/table.f23_TSM1")
		produced_files.append("3C147_split_6s.ms/SYSCAL")
		produced_files.append("3C147_split_6s.ms/SYSCAL/table.dat")
		produced_files.append("3C147_split_6s.ms/SYSCAL/table.lock")
		produced_files.append("3C147_split_6s.ms/SYSCAL/table.f0i")
		produced_files.append("3C147_split_6s.ms/SYSCAL/table.info")
		produced_files.append("3C147_split_6s.ms/SYSCAL/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f17")
		produced_files.append("3C147_split_6s.ms/SOURCE")
		produced_files.append("3C147_split_6s.ms/SOURCE/table.dat")
		produced_files.append("3C147_split_6s.ms/SOURCE/table.lock")
		produced_files.append("3C147_split_6s.ms/SOURCE/table.f0i")
		produced_files.append("3C147_split_6s.ms/SOURCE/table.info")
		produced_files.append("3C147_split_6s.ms/SOURCE/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f9")
		produced_files.append("3C147_split_6s.ms/CALDEVICE")
		produced_files.append("3C147_split_6s.ms/CALDEVICE/table.dat")
		produced_files.append("3C147_split_6s.ms/CALDEVICE/table.lock")
		produced_files.append("3C147_split_6s.ms/CALDEVICE/table.f0i")
		produced_files.append("3C147_split_6s.ms/CALDEVICE/table.info")
		produced_files.append("3C147_split_6s.ms/CALDEVICE/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f17_TSM1")
		produced_files.append("3C147_split_6s.ms/table.f13")
		produced_files.append("3C147_split_6s.ms/OBSERVATION")
		produced_files.append("3C147_split_6s.ms/OBSERVATION/table.dat")
		produced_files.append("3C147_split_6s.ms/OBSERVATION/table.lock")
		produced_files.append("3C147_split_6s.ms/OBSERVATION/table.info")
		produced_files.append("3C147_split_6s.ms/OBSERVATION/table.f0")
		produced_files.append("3C147_split_6s.ms/WEATHER")
		produced_files.append("3C147_split_6s.ms/WEATHER/table.dat")
		produced_files.append("3C147_split_6s.ms/WEATHER/table.lock")
		produced_files.append("3C147_split_6s.ms/WEATHER/table.info")
		produced_files.append("3C147_split_6s.ms/WEATHER/table.f0")
		produced_files.append("3C147_split_6s.ms/table.f7")

		RegressionHelper.assert_files(produced_files, os.getcwd())


		outputvis = "3C147_split_6s.ms"
		RegressionHelper.assert_file("%s/%s" % (os.getcwd(), outputvis))

		remove = []
		remove.append("%s/%s" % (os.getcwd(), outputvis))
		#RegressionHelper.data_remove(remove)

	def post_53(self):
		"""post method for "splitting calibrated data J0603+174"
		"""
		produced_files = []
		produced_files.append("J0603_split_6s.ms")
		produced_files.append("J0603_split_6s.ms/table.f19")
		produced_files.append("J0603_split_6s.ms/table.f2")
		produced_files.append("J0603_split_6s.ms/table.dat")
		produced_files.append("J0603_split_6s.ms/table.lock")
		produced_files.append("J0603_split_6s.ms/FLAG_CMD")
		produced_files.append("J0603_split_6s.ms/FLAG_CMD/table.dat")
		produced_files.append("J0603_split_6s.ms/FLAG_CMD/table.lock")
		produced_files.append("J0603_split_6s.ms/FLAG_CMD/table.info")
		produced_files.append("J0603_split_6s.ms/FLAG_CMD/table.f0")
		produced_files.append("J0603_split_6s.ms/SYSPOWER")
		produced_files.append("J0603_split_6s.ms/SYSPOWER/table.dat")
		produced_files.append("J0603_split_6s.ms/SYSPOWER/table.lock")
		produced_files.append("J0603_split_6s.ms/SYSPOWER/table.f0i")
		produced_files.append("J0603_split_6s.ms/SYSPOWER/table.info")
		produced_files.append("J0603_split_6s.ms/SYSPOWER/table.f0")
		produced_files.append("J0603_split_6s.ms/STATE")
		produced_files.append("J0603_split_6s.ms/STATE/table.dat")
		produced_files.append("J0603_split_6s.ms/STATE/table.lock")
		produced_files.append("J0603_split_6s.ms/STATE/table.info")
		produced_files.append("J0603_split_6s.ms/STATE/table.f0")
		produced_files.append("J0603_split_6s.ms/FEED")
		produced_files.append("J0603_split_6s.ms/FEED/table.dat")
		produced_files.append("J0603_split_6s.ms/FEED/table.lock")
		produced_files.append("J0603_split_6s.ms/FEED/table.f0i")
		produced_files.append("J0603_split_6s.ms/FEED/table.info")
		produced_files.append("J0603_split_6s.ms/FEED/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f10")
		produced_files.append("J0603_split_6s.ms/ANTENNA")
		produced_files.append("J0603_split_6s.ms/ANTENNA/table.dat")
		produced_files.append("J0603_split_6s.ms/ANTENNA/table.lock")
		produced_files.append("J0603_split_6s.ms/ANTENNA/table.info")
		produced_files.append("J0603_split_6s.ms/ANTENNA/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f18")
		produced_files.append("J0603_split_6s.ms/table.f20")
		produced_files.append("J0603_split_6s.ms/table.f12")
		produced_files.append("J0603_split_6s.ms/table.f11")
		produced_files.append("J0603_split_6s.ms/SPECTRAL_WINDOW")
		produced_files.append("J0603_split_6s.ms/SPECTRAL_WINDOW/table.dat")
		produced_files.append("J0603_split_6s.ms/SPECTRAL_WINDOW/table.lock")
		produced_files.append("J0603_split_6s.ms/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("J0603_split_6s.ms/SPECTRAL_WINDOW/table.info")
		produced_files.append("J0603_split_6s.ms/SPECTRAL_WINDOW/table.f0")
		produced_files.append("J0603_split_6s.ms/HISTORY")
		produced_files.append("J0603_split_6s.ms/HISTORY/table.dat")
		produced_files.append("J0603_split_6s.ms/HISTORY/table.lock")
		produced_files.append("J0603_split_6s.ms/HISTORY/table.info")
		produced_files.append("J0603_split_6s.ms/HISTORY/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f23")
		produced_files.append("J0603_split_6s.ms/table.f20_TSM0")
		produced_files.append("J0603_split_6s.ms/table.f16")
		produced_files.append("J0603_split_6s.ms/table.f1")
		produced_files.append("J0603_split_6s.ms/FIELD")
		produced_files.append("J0603_split_6s.ms/FIELD/table.dat")
		produced_files.append("J0603_split_6s.ms/FIELD/table.lock")
		produced_files.append("J0603_split_6s.ms/FIELD/table.f0i")
		produced_files.append("J0603_split_6s.ms/FIELD/table.info")
		produced_files.append("J0603_split_6s.ms/FIELD/table.f0")
		produced_files.append("J0603_split_6s.ms/DATA_DESCRIPTION")
		produced_files.append("J0603_split_6s.ms/DATA_DESCRIPTION/table.dat")
		produced_files.append("J0603_split_6s.ms/DATA_DESCRIPTION/table.lock")
		produced_files.append("J0603_split_6s.ms/DATA_DESCRIPTION/table.info")
		produced_files.append("J0603_split_6s.ms/DATA_DESCRIPTION/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f14")
		produced_files.append("J0603_split_6s.ms/table.f6")
		produced_files.append("J0603_split_6s.ms/SORTED_TABLE")
		produced_files.append("J0603_split_6s.ms/SORTED_TABLE/table.dat")
		produced_files.append("J0603_split_6s.ms/SORTED_TABLE/table.info")
		produced_files.append("J0603_split_6s.ms/POINTING")
		produced_files.append("J0603_split_6s.ms/POINTING/table.dat")
		produced_files.append("J0603_split_6s.ms/POINTING/table.lock")
		produced_files.append("J0603_split_6s.ms/POINTING/table.f0i")
		produced_files.append("J0603_split_6s.ms/POINTING/table.info")
		produced_files.append("J0603_split_6s.ms/POINTING/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f3")
		produced_files.append("J0603_split_6s.ms/table.f15")
		produced_files.append("J0603_split_6s.ms/table.f22")
		produced_files.append("J0603_split_6s.ms/table.f4")
		produced_files.append("J0603_split_6s.ms/table.f22_TSM1")
		produced_files.append("J0603_split_6s.ms/table.f5")
		produced_files.append("J0603_split_6s.ms/table.info")
		produced_files.append("J0603_split_6s.ms/PROCESSOR")
		produced_files.append("J0603_split_6s.ms/PROCESSOR/table.dat")
		produced_files.append("J0603_split_6s.ms/PROCESSOR/table.lock")
		produced_files.append("J0603_split_6s.ms/PROCESSOR/table.info")
		produced_files.append("J0603_split_6s.ms/PROCESSOR/table.f0")
		produced_files.append("J0603_split_6s.ms/POLARIZATION")
		produced_files.append("J0603_split_6s.ms/POLARIZATION/table.dat")
		produced_files.append("J0603_split_6s.ms/POLARIZATION/table.lock")
		produced_files.append("J0603_split_6s.ms/POLARIZATION/table.f0i")
		produced_files.append("J0603_split_6s.ms/POLARIZATION/table.info")
		produced_files.append("J0603_split_6s.ms/POLARIZATION/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f21_TSM1")
		produced_files.append("J0603_split_6s.ms/table.f21")
		produced_files.append("J0603_split_6s.ms/table.f8")
		produced_files.append("J0603_split_6s.ms/table.f23_TSM1")
		produced_files.append("J0603_split_6s.ms/SYSCAL")
		produced_files.append("J0603_split_6s.ms/SYSCAL/table.dat")
		produced_files.append("J0603_split_6s.ms/SYSCAL/table.lock")
		produced_files.append("J0603_split_6s.ms/SYSCAL/table.f0i")
		produced_files.append("J0603_split_6s.ms/SYSCAL/table.info")
		produced_files.append("J0603_split_6s.ms/SYSCAL/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f17")
		produced_files.append("J0603_split_6s.ms/SOURCE")
		produced_files.append("J0603_split_6s.ms/SOURCE/table.dat")
		produced_files.append("J0603_split_6s.ms/SOURCE/table.lock")
		produced_files.append("J0603_split_6s.ms/SOURCE/table.f0i")
		produced_files.append("J0603_split_6s.ms/SOURCE/table.info")
		produced_files.append("J0603_split_6s.ms/SOURCE/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f9")
		produced_files.append("J0603_split_6s.ms/CALDEVICE")
		produced_files.append("J0603_split_6s.ms/CALDEVICE/table.dat")
		produced_files.append("J0603_split_6s.ms/CALDEVICE/table.lock")
		produced_files.append("J0603_split_6s.ms/CALDEVICE/table.f0i")
		produced_files.append("J0603_split_6s.ms/CALDEVICE/table.info")
		produced_files.append("J0603_split_6s.ms/CALDEVICE/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f17_TSM1")
		produced_files.append("J0603_split_6s.ms/table.f13")
		produced_files.append("J0603_split_6s.ms/OBSERVATION")
		produced_files.append("J0603_split_6s.ms/OBSERVATION/table.dat")
		produced_files.append("J0603_split_6s.ms/OBSERVATION/table.lock")
		produced_files.append("J0603_split_6s.ms/OBSERVATION/table.info")
		produced_files.append("J0603_split_6s.ms/OBSERVATION/table.f0")
		produced_files.append("J0603_split_6s.ms/WEATHER")
		produced_files.append("J0603_split_6s.ms/WEATHER/table.dat")
		produced_files.append("J0603_split_6s.ms/WEATHER/table.lock")
		produced_files.append("J0603_split_6s.ms/WEATHER/table.info")
		produced_files.append("J0603_split_6s.ms/WEATHER/table.f0")
		produced_files.append("J0603_split_6s.ms/table.f7")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_54(self):
		"""post method for "splitting calibrated data G192"
		"""
		produced_files = []
		produced_files.append("G192_split_6s.ms")
		produced_files.append("G192_split_6s.ms/table.f19")
		produced_files.append("G192_split_6s.ms/table.f2")
		produced_files.append("G192_split_6s.ms/table.dat")
		produced_files.append("G192_split_6s.ms/table.lock")
		produced_files.append("G192_split_6s.ms/FLAG_CMD")
		produced_files.append("G192_split_6s.ms/FLAG_CMD/table.dat")
		produced_files.append("G192_split_6s.ms/FLAG_CMD/table.lock")
		produced_files.append("G192_split_6s.ms/FLAG_CMD/table.info")
		produced_files.append("G192_split_6s.ms/FLAG_CMD/table.f0")
		produced_files.append("G192_split_6s.ms/SYSPOWER")
		produced_files.append("G192_split_6s.ms/SYSPOWER/table.dat")
		produced_files.append("G192_split_6s.ms/SYSPOWER/table.lock")
		produced_files.append("G192_split_6s.ms/SYSPOWER/table.f0i")
		produced_files.append("G192_split_6s.ms/SYSPOWER/table.info")
		produced_files.append("G192_split_6s.ms/SYSPOWER/table.f0")
		produced_files.append("G192_split_6s.ms/STATE")
		produced_files.append("G192_split_6s.ms/STATE/table.dat")
		produced_files.append("G192_split_6s.ms/STATE/table.lock")
		produced_files.append("G192_split_6s.ms/STATE/table.info")
		produced_files.append("G192_split_6s.ms/STATE/table.f0")
		produced_files.append("G192_split_6s.ms/FEED")
		produced_files.append("G192_split_6s.ms/FEED/table.dat")
		produced_files.append("G192_split_6s.ms/FEED/table.lock")
		produced_files.append("G192_split_6s.ms/FEED/table.f0i")
		produced_files.append("G192_split_6s.ms/FEED/table.info")
		produced_files.append("G192_split_6s.ms/FEED/table.f0")
		produced_files.append("G192_split_6s.ms/table.f10")
		produced_files.append("G192_split_6s.ms/ANTENNA")
		produced_files.append("G192_split_6s.ms/ANTENNA/table.dat")
		produced_files.append("G192_split_6s.ms/ANTENNA/table.lock")
		produced_files.append("G192_split_6s.ms/ANTENNA/table.info")
		produced_files.append("G192_split_6s.ms/ANTENNA/table.f0")
		produced_files.append("G192_split_6s.ms/table.f18")
		produced_files.append("G192_split_6s.ms/table.f20")
		produced_files.append("G192_split_6s.ms/table.f12")
		produced_files.append("G192_split_6s.ms/table.f11")
		produced_files.append("G192_split_6s.ms/SPECTRAL_WINDOW")
		produced_files.append("G192_split_6s.ms/SPECTRAL_WINDOW/table.dat")
		produced_files.append("G192_split_6s.ms/SPECTRAL_WINDOW/table.lock")
		produced_files.append("G192_split_6s.ms/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("G192_split_6s.ms/SPECTRAL_WINDOW/table.info")
		produced_files.append("G192_split_6s.ms/SPECTRAL_WINDOW/table.f0")
		produced_files.append("G192_split_6s.ms/HISTORY")
		produced_files.append("G192_split_6s.ms/HISTORY/table.dat")
		produced_files.append("G192_split_6s.ms/HISTORY/table.lock")
		produced_files.append("G192_split_6s.ms/HISTORY/table.info")
		produced_files.append("G192_split_6s.ms/HISTORY/table.f0")
		produced_files.append("G192_split_6s.ms/table.f23")
		produced_files.append("G192_split_6s.ms/table.f20_TSM0")
		produced_files.append("G192_split_6s.ms/table.f16")
		produced_files.append("G192_split_6s.ms/table.f1")
		produced_files.append("G192_split_6s.ms/FIELD")
		produced_files.append("G192_split_6s.ms/FIELD/table.dat")
		produced_files.append("G192_split_6s.ms/FIELD/table.lock")
		produced_files.append("G192_split_6s.ms/FIELD/table.f0i")
		produced_files.append("G192_split_6s.ms/FIELD/table.info")
		produced_files.append("G192_split_6s.ms/FIELD/table.f0")
		produced_files.append("G192_split_6s.ms/DATA_DESCRIPTION")
		produced_files.append("G192_split_6s.ms/DATA_DESCRIPTION/table.dat")
		produced_files.append("G192_split_6s.ms/DATA_DESCRIPTION/table.lock")
		produced_files.append("G192_split_6s.ms/DATA_DESCRIPTION/table.info")
		produced_files.append("G192_split_6s.ms/DATA_DESCRIPTION/table.f0")
		produced_files.append("G192_split_6s.ms/table.f14")
		produced_files.append("G192_split_6s.ms/table.f6")
		produced_files.append("G192_split_6s.ms/SORTED_TABLE")
		produced_files.append("G192_split_6s.ms/SORTED_TABLE/table.dat")
		produced_files.append("G192_split_6s.ms/SORTED_TABLE/table.info")
		produced_files.append("G192_split_6s.ms/POINTING")
		produced_files.append("G192_split_6s.ms/POINTING/table.dat")
		produced_files.append("G192_split_6s.ms/POINTING/table.lock")
		produced_files.append("G192_split_6s.ms/POINTING/table.f0i")
		produced_files.append("G192_split_6s.ms/POINTING/table.info")
		produced_files.append("G192_split_6s.ms/POINTING/table.f0")
		produced_files.append("G192_split_6s.ms/table.f3")
		produced_files.append("G192_split_6s.ms/table.f15")
		produced_files.append("G192_split_6s.ms/table.f22")
		produced_files.append("G192_split_6s.ms/table.f4")
		produced_files.append("G192_split_6s.ms/table.f22_TSM1")
		produced_files.append("G192_split_6s.ms/table.f5")
		produced_files.append("G192_split_6s.ms/table.info")
		produced_files.append("G192_split_6s.ms/PROCESSOR")
		produced_files.append("G192_split_6s.ms/PROCESSOR/table.dat")
		produced_files.append("G192_split_6s.ms/PROCESSOR/table.lock")
		produced_files.append("G192_split_6s.ms/PROCESSOR/table.info")
		produced_files.append("G192_split_6s.ms/PROCESSOR/table.f0")
		produced_files.append("G192_split_6s.ms/POLARIZATION")
		produced_files.append("G192_split_6s.ms/POLARIZATION/table.dat")
		produced_files.append("G192_split_6s.ms/POLARIZATION/table.lock")
		produced_files.append("G192_split_6s.ms/POLARIZATION/table.f0i")
		produced_files.append("G192_split_6s.ms/POLARIZATION/table.info")
		produced_files.append("G192_split_6s.ms/POLARIZATION/table.f0")
		produced_files.append("G192_split_6s.ms/table.f21_TSM1")
		produced_files.append("G192_split_6s.ms/table.f21")
		produced_files.append("G192_split_6s.ms/table.f8")
		produced_files.append("G192_split_6s.ms/table.f23_TSM1")
		produced_files.append("G192_split_6s.ms/SYSCAL")
		produced_files.append("G192_split_6s.ms/SYSCAL/table.dat")
		produced_files.append("G192_split_6s.ms/SYSCAL/table.lock")
		produced_files.append("G192_split_6s.ms/SYSCAL/table.f0i")
		produced_files.append("G192_split_6s.ms/SYSCAL/table.info")
		produced_files.append("G192_split_6s.ms/SYSCAL/table.f0")
		produced_files.append("G192_split_6s.ms/table.f17")
		produced_files.append("G192_split_6s.ms/SOURCE")
		produced_files.append("G192_split_6s.ms/SOURCE/table.dat")
		produced_files.append("G192_split_6s.ms/SOURCE/table.lock")
		produced_files.append("G192_split_6s.ms/SOURCE/table.f0i")
		produced_files.append("G192_split_6s.ms/SOURCE/table.info")
		produced_files.append("G192_split_6s.ms/SOURCE/table.f0")
		produced_files.append("G192_split_6s.ms/table.f9")
		produced_files.append("G192_split_6s.ms/CALDEVICE")
		produced_files.append("G192_split_6s.ms/CALDEVICE/table.dat")
		produced_files.append("G192_split_6s.ms/CALDEVICE/table.lock")
		produced_files.append("G192_split_6s.ms/CALDEVICE/table.f0i")
		produced_files.append("G192_split_6s.ms/CALDEVICE/table.info")
		produced_files.append("G192_split_6s.ms/CALDEVICE/table.f0")
		produced_files.append("G192_split_6s.ms/table.f17_TSM1")
		produced_files.append("G192_split_6s.ms/table.f13")
		produced_files.append("G192_split_6s.ms/OBSERVATION")
		produced_files.append("G192_split_6s.ms/OBSERVATION/table.dat")
		produced_files.append("G192_split_6s.ms/OBSERVATION/table.lock")
		produced_files.append("G192_split_6s.ms/OBSERVATION/table.info")
		produced_files.append("G192_split_6s.ms/OBSERVATION/table.f0")
		produced_files.append("G192_split_6s.ms/WEATHER")
		produced_files.append("G192_split_6s.ms/WEATHER/table.dat")
		produced_files.append("G192_split_6s.ms/WEATHER/table.lock")
		produced_files.append("G192_split_6s.ms/WEATHER/table.info")
		produced_files.append("G192_split_6s.ms/WEATHER/table.f0")
		produced_files.append("G192_split_6s.ms/table.f7")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_55(self):
		"""post method for "splitting calibrated data 3C84"
		"""
		produced_files = []
		produced_files.append("3C84_split_6s.ms")
		produced_files.append("3C84_split_6s.ms/table.f19")
		produced_files.append("3C84_split_6s.ms/table.f2")
		produced_files.append("3C84_split_6s.ms/table.dat")
		produced_files.append("3C84_split_6s.ms/table.lock")
		produced_files.append("3C84_split_6s.ms/FLAG_CMD")
		produced_files.append("3C84_split_6s.ms/FLAG_CMD/table.dat")
		produced_files.append("3C84_split_6s.ms/FLAG_CMD/table.lock")
		produced_files.append("3C84_split_6s.ms/FLAG_CMD/table.info")
		produced_files.append("3C84_split_6s.ms/FLAG_CMD/table.f0")
		produced_files.append("3C84_split_6s.ms/SYSPOWER")
		produced_files.append("3C84_split_6s.ms/SYSPOWER/table.dat")
		produced_files.append("3C84_split_6s.ms/SYSPOWER/table.lock")
		produced_files.append("3C84_split_6s.ms/SYSPOWER/table.f0i")
		produced_files.append("3C84_split_6s.ms/SYSPOWER/table.info")
		produced_files.append("3C84_split_6s.ms/SYSPOWER/table.f0")
		produced_files.append("3C84_split_6s.ms/STATE")
		produced_files.append("3C84_split_6s.ms/STATE/table.dat")
		produced_files.append("3C84_split_6s.ms/STATE/table.lock")
		produced_files.append("3C84_split_6s.ms/STATE/table.info")
		produced_files.append("3C84_split_6s.ms/STATE/table.f0")
		produced_files.append("3C84_split_6s.ms/FEED")
		produced_files.append("3C84_split_6s.ms/FEED/table.dat")
		produced_files.append("3C84_split_6s.ms/FEED/table.lock")
		produced_files.append("3C84_split_6s.ms/FEED/table.f0i")
		produced_files.append("3C84_split_6s.ms/FEED/table.info")
		produced_files.append("3C84_split_6s.ms/FEED/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f10")
		produced_files.append("3C84_split_6s.ms/ANTENNA")
		produced_files.append("3C84_split_6s.ms/ANTENNA/table.dat")
		produced_files.append("3C84_split_6s.ms/ANTENNA/table.lock")
		produced_files.append("3C84_split_6s.ms/ANTENNA/table.info")
		produced_files.append("3C84_split_6s.ms/ANTENNA/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f18")
		produced_files.append("3C84_split_6s.ms/table.f20")
		produced_files.append("3C84_split_6s.ms/table.f12")
		produced_files.append("3C84_split_6s.ms/table.f11")
		produced_files.append("3C84_split_6s.ms/SPECTRAL_WINDOW")
		produced_files.append("3C84_split_6s.ms/SPECTRAL_WINDOW/table.dat")
		produced_files.append("3C84_split_6s.ms/SPECTRAL_WINDOW/table.lock")
		produced_files.append("3C84_split_6s.ms/SPECTRAL_WINDOW/table.f0i")
		produced_files.append("3C84_split_6s.ms/SPECTRAL_WINDOW/table.info")
		produced_files.append("3C84_split_6s.ms/SPECTRAL_WINDOW/table.f0")
		produced_files.append("3C84_split_6s.ms/HISTORY")
		produced_files.append("3C84_split_6s.ms/HISTORY/table.dat")
		produced_files.append("3C84_split_6s.ms/HISTORY/table.lock")
		produced_files.append("3C84_split_6s.ms/HISTORY/table.info")
		produced_files.append("3C84_split_6s.ms/HISTORY/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f23")
		produced_files.append("3C84_split_6s.ms/table.f20_TSM0")
		produced_files.append("3C84_split_6s.ms/table.f16")
		produced_files.append("3C84_split_6s.ms/table.f1")
		produced_files.append("3C84_split_6s.ms/FIELD")
		produced_files.append("3C84_split_6s.ms/FIELD/table.dat")
		produced_files.append("3C84_split_6s.ms/FIELD/table.lock")
		produced_files.append("3C84_split_6s.ms/FIELD/table.f0i")
		produced_files.append("3C84_split_6s.ms/FIELD/table.info")
		produced_files.append("3C84_split_6s.ms/FIELD/table.f0")
		produced_files.append("3C84_split_6s.ms/DATA_DESCRIPTION")
		produced_files.append("3C84_split_6s.ms/DATA_DESCRIPTION/table.dat")
		produced_files.append("3C84_split_6s.ms/DATA_DESCRIPTION/table.lock")
		produced_files.append("3C84_split_6s.ms/DATA_DESCRIPTION/table.info")
		produced_files.append("3C84_split_6s.ms/DATA_DESCRIPTION/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f14")
		produced_files.append("3C84_split_6s.ms/table.f6")
		produced_files.append("3C84_split_6s.ms/SORTED_TABLE")
		produced_files.append("3C84_split_6s.ms/SORTED_TABLE/table.dat")
		produced_files.append("3C84_split_6s.ms/SORTED_TABLE/table.info")
		produced_files.append("3C84_split_6s.ms/POINTING")
		produced_files.append("3C84_split_6s.ms/POINTING/table.dat")
		produced_files.append("3C84_split_6s.ms/POINTING/table.lock")
		produced_files.append("3C84_split_6s.ms/POINTING/table.f0i")
		produced_files.append("3C84_split_6s.ms/POINTING/table.info")
		produced_files.append("3C84_split_6s.ms/POINTING/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f3")
		produced_files.append("3C84_split_6s.ms/table.f15")
		produced_files.append("3C84_split_6s.ms/table.f22")
		produced_files.append("3C84_split_6s.ms/table.f4")
		produced_files.append("3C84_split_6s.ms/table.f22_TSM1")
		produced_files.append("3C84_split_6s.ms/table.f5")
		produced_files.append("3C84_split_6s.ms/table.info")
		produced_files.append("3C84_split_6s.ms/PROCESSOR")
		produced_files.append("3C84_split_6s.ms/PROCESSOR/table.dat")
		produced_files.append("3C84_split_6s.ms/PROCESSOR/table.lock")
		produced_files.append("3C84_split_6s.ms/PROCESSOR/table.info")
		produced_files.append("3C84_split_6s.ms/PROCESSOR/table.f0")
		produced_files.append("3C84_split_6s.ms/POLARIZATION")
		produced_files.append("3C84_split_6s.ms/POLARIZATION/table.dat")
		produced_files.append("3C84_split_6s.ms/POLARIZATION/table.lock")
		produced_files.append("3C84_split_6s.ms/POLARIZATION/table.f0i")
		produced_files.append("3C84_split_6s.ms/POLARIZATION/table.info")
		produced_files.append("3C84_split_6s.ms/POLARIZATION/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f21_TSM1")
		produced_files.append("3C84_split_6s.ms/table.f21")
		produced_files.append("3C84_split_6s.ms/table.f8")
		produced_files.append("3C84_split_6s.ms/table.f23_TSM1")
		produced_files.append("3C84_split_6s.ms/SYSCAL")
		produced_files.append("3C84_split_6s.ms/SYSCAL/table.dat")
		produced_files.append("3C84_split_6s.ms/SYSCAL/table.lock")
		produced_files.append("3C84_split_6s.ms/SYSCAL/table.f0i")
		produced_files.append("3C84_split_6s.ms/SYSCAL/table.info")
		produced_files.append("3C84_split_6s.ms/SYSCAL/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f17")
		produced_files.append("3C84_split_6s.ms/SOURCE")
		produced_files.append("3C84_split_6s.ms/SOURCE/table.dat")
		produced_files.append("3C84_split_6s.ms/SOURCE/table.lock")
		produced_files.append("3C84_split_6s.ms/SOURCE/table.f0i")
		produced_files.append("3C84_split_6s.ms/SOURCE/table.info")
		produced_files.append("3C84_split_6s.ms/SOURCE/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f9")
		produced_files.append("3C84_split_6s.ms/CALDEVICE")
		produced_files.append("3C84_split_6s.ms/CALDEVICE/table.dat")
		produced_files.append("3C84_split_6s.ms/CALDEVICE/table.lock")
		produced_files.append("3C84_split_6s.ms/CALDEVICE/table.f0i")
		produced_files.append("3C84_split_6s.ms/CALDEVICE/table.info")
		produced_files.append("3C84_split_6s.ms/CALDEVICE/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f17_TSM1")
		produced_files.append("3C84_split_6s.ms/table.f13")
		produced_files.append("3C84_split_6s.ms/OBSERVATION")
		produced_files.append("3C84_split_6s.ms/OBSERVATION/table.dat")
		produced_files.append("3C84_split_6s.ms/OBSERVATION/table.lock")
		produced_files.append("3C84_split_6s.ms/OBSERVATION/table.info")
		produced_files.append("3C84_split_6s.ms/OBSERVATION/table.f0")
		produced_files.append("3C84_split_6s.ms/WEATHER")
		produced_files.append("3C84_split_6s.ms/WEATHER/table.dat")
		produced_files.append("3C84_split_6s.ms/WEATHER/table.lock")
		produced_files.append("3C84_split_6s.ms/WEATHER/table.info")
		produced_files.append("3C84_split_6s.ms/WEATHER/table.f0")
		produced_files.append("3C84_split_6s.ms/table.f7")

		RegressionHelper.assert_files(produced_files, os.getcwd())

	def post_56(self):
		"""post method for "single spectral window cleaning"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_57(self):
		"""post method for "lower frequency baseband cleaning"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_58(self):
		"""post method for "upper frequency baseband cleaning"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_59(self):
		"""post method for "basebands mfs taylor cleaning"
		"""
		raise NotImplementedError("post test method not implemented")

	def post_60(self):
		"""post method for "spectral index image filtering"
		"""
		outfile = "imgG192_6s_spw0-63_mfs2.image.alpha.filtered"
		RegressionHelper.assert_file("%s/%s" % (os.getcwd(), outfile))

	def post_61(self):
		"""post method for "spectral index probable errors filtering"
		"""
		outfile = "imgG192_6s_spw0-63_mfs2.image.alpha.error.filtered"
		RegressionHelper.assert_file("%s/%s" % (os.getcwd(), outfile))

	def post_62(self):
		"""post method for "intensity weighted mean spectral analysis"
		"""
		outfile_tt1 = "imgG192_6s_spw0-63_mfs2.image.tt1.filtered"
		outfile_tt0 = "imgG192_6s_spw0-63_mfs2.image.tt0.filtered"
		
		RegressionHelper.assert_file("%s/%s" % (os.getcwd(), outfile_tt1))
		RegressionHelper.assert_file("%s/%s" % (os.getcwd(), outfile_tt0))

if __name__ == "__main__":
	method_name = globals()["exec_method"]
	assert len(method_name), "method name not defined"
	helper_instance = Post_Test_EVLA3BitTutorialG192Eg()
	helper_instance.exec_method(method_name)