## define template variables
#set($guide_phrases = $template_helper["phrases"])
#set($guide = $template_helper["guide"])
#set($guide_class = "Test_" + $guide)
#set($uri = $template_helper["uri"])
"""
This is a generated module
all modified changes will be lost in the next code generation

The module provide to execute a method of the helper class by using the value
of "exec_method" key inserted at runtime in the globals map
"""

import sys

assert sys.version >= '2' and sys.version_info.minor >= 7, "Python 2.7 or greater is supported"
assert globals().has_key("IPython"), "IPython environment is needed for this module (%s)" % __file__
assert globals().has_key("casa"), "CASA environment is needed for this module (%s)" % __file__

import os

from testc.regression.helper import RegressionHelper
from testc.regression.helper import regressionLogger

__test__ = False
__all__ = ["Helper_${guide_class}"]

class Helper_${guide_class}():
	"""Helper class for $uri casa guide
	
	This is an autogenerated class for $uri guide testing purposes,
	all the modified code will be re-written in the next code generation.

	The class will help the following phrases:

	#foreach ($phrase in $guide_phrases)
	test_$phrase[2] "$phrase[0]"#end

	"""

	def exec_method(self, method_name):
		"""Execute a method from this object instance
		"""
		regressionLogger.debug("exec_method(self, %s):..." % method_name)
		getattr(self, method_name)()

#foreach ($phrase in $guide_phrases)
	def helper_${phrase[2]}(self): 
		""" helper method for "${phrase[0]}"
		"""#foreach ($content in $phrase[1].split("\n"))		
#set($tabbed_content = "\t\t" + $content)${tabbed_content}#end #end

if __name__ == "__main__":
	method_name = globals()["exec_method"]
	assert len(method_name), "method name not defined"
	helper_instance = Helper_${guide_class}()
	helper_instance.exec_method(method_name)