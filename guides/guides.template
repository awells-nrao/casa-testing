## define template variables
#set($guide_phrases = $template_helper["phrases"])
#set($guide = $template_helper["guide"])
#set($guide_class = "Test_" + $guide)
#set($uri = $template_helper["uri"])
##

# This is a generated module
# all modified changes will be lost in the next code generation

# Defined keyword-phrases #foreach ($phrase in $guide_phrases)
# keyword-phrase: "$phrase[0]" #end


import sys

assert sys.version >= '2' and sys.version_info.minor >= 7, "Python 2.7 or greater is supported"

import os
import unittest

from testc.regression.helper import RegressionHelper
from testc.regression.helper import RegressionBase
from testc.regression.helper import regressionLogger

__test__ = True
__all__ = ["$guide_class"]

class ${guide_class}(RegressionBase):
	""" Testing guides from $uri
	"""

	@classmethod
	def setUpClass(cls):
		pass

	def setUp(self):
		pass

	def tearDown(self):
		pass

	@classmethod
	def tearDownClass(cls):
		pass

	#set($counter = 0)
	#foreach ($phrase in $guide_phrases)
	@unittest.skip("still a stub, to be implemented")
	def test_${guide}_0${counter}_${phrase[0].replace(" ", "_").replace("+", "_").lower()}(self):
		"""$uri "$phrase[0]"
		"""
		self.execute("guides_helper_${guide}", 
			custom_globals = {"exec_method" : "helper_0${counter}_${phrase[0].replace(" ", "_").replace("+", "_").lower()}"})

		#self.execute("guides_post_${guide}", 
		#	custom_globals = {"exec_method" : "post_0${counter}_${phrase[0].replace(" ", "_").replace("+", "_").lower()}"})		
	#set($counter = $counter + 1)
	#end

	# skelletons

	#set($counter = 0)
	#foreach ($phrase in $guide_phrases)
	# def post_0${counter}_${phrase[0].replace(" ", "_").lower()}(): pass
	#set($counter = $counter + 1)
	#end