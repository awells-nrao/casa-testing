## define template variables
#set($guide_phrases = $template_helper["phrases"])
#set($guide = $template_helper["guide"])
#set($guide_class = "Test_" + $guide)
#set($uri = $template_helper["uri"])
##
"""
This is a generated module
all modified changes will be lost in the next code generation
"""

import sys

assert sys.version >= '2' and sys.version_info.minor >= 7, "Python 2.7 or greater is supported"

import os
import unittest

from testc.regression.helper import RegressionHelper
from testc.regression.helper import RegressionBase
from testc.regression.helper import regressionLogger

__test__ = True
__all__ = ["$guide_class"]

class ${guide_class}(RegressionBase):
	"""Testing class for $uri casa guide
	
	This is an autogenerated class for $uri guide testing purposes,
	all the modified code will be re-written in the next code generation.

	The class will test the following phrases:

	#foreach ($phrase in $guide_phrases)
	test_$phrase[2] "$phrase[0]"#end

	"""

	@classmethod
	def setUpClass(cls):
		pass

	def setUp(self):
		pass

	def tearDown(self):
		pass

	@classmethod
	def tearDownClass(cls):
		pass

	#foreach ($phrase in $guide_phrases)
	@unittest.skip("still a stub, to be implemented")
	def test_${phrase[2]}_${phrase[3]}(self):
		"""test ${phrase[2]} $uri "$phrase[0]"
		"""
		self.execute("guides_helper_${guide}", custom_globals = {"exec_method" : "helper_${phrase[2]}"})
		self.execute("guides_post_${guide}", custom_globals = {"exec_method" : "post_${phrase[2]}"})		
	#end

## class methods stubs for the actual testing

##foreach ($phrase in $guide_phrases)
##	def post_${phrase[2]}(self):
##		"""post method for "$phrase[0]"
##		"""
##		assert True, "dummy assert"
##end